
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model AdminAccess
 * 
 */
export type AdminAccess = $Result.DefaultSelection<Prisma.$AdminAccessPayload>
/**
 * Model Credential
 * 
 */
export type Credential = $Result.DefaultSelection<Prisma.$CredentialPayload>
/**
 * Model ProductTranslate
 * 
 */
export type ProductTranslate = $Result.DefaultSelection<Prisma.$ProductTranslatePayload>
/**
 * Model ProductCredentials
 * 
 */
export type ProductCredentials = $Result.DefaultSelection<Prisma.$ProductCredentialsPayload>
/**
 * Model Service
 * 
 */
export type Service = $Result.DefaultSelection<Prisma.$ServicePayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Locales: {
  BR: 'BR',
  EN: 'EN'
};

export type Locales = (typeof Locales)[keyof typeof Locales]


export const Game: {
  RAINBOW: 'RAINBOW',
  GTA: 'GTA'
};

export type Game = (typeof Game)[keyof typeof Game]


export const Plataform: {
  PC: 'PC',
  PS4: 'PS4',
  PS5: 'PS5',
  XBOX_ONE: 'XBOX_ONE',
  XBOX_SERIES: 'XBOX_SERIES'
};

export type Plataform = (typeof Plataform)[keyof typeof Plataform]


export const Type: {
  BOOST: 'BOOST',
  PACK: 'PACK',
  ACCOUNT: 'ACCOUNT'
};

export type Type = (typeof Type)[keyof typeof Type]


export const Status: {
  WAITING: 'WAITING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
};

export type Status = (typeof Status)[keyof typeof Status]


export const SessionStatus: {
  COMPLETE: 'COMPLETE',
  EXPIRED: 'EXPIRED',
  OPEN: 'OPEN'
};

export type SessionStatus = (typeof SessionStatus)[keyof typeof SessionStatus]


export const PaymentStatus: {
  CANCELED: 'CANCELED',
  PROCESSING: 'PROCESSING',
  REQUIRE_ACTION: 'REQUIRE_ACTION',
  REQUIRES_PAYMENT_METHOD: 'REQUIRES_PAYMENT_METHOD',
  SUCCEEDED: 'SUCCEEDED'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const OrderStatus: {
  WAITING_CREDENTIALS: 'WAITING_CREDENTIALS',
  WAITING_PAYMENT: 'WAITING_PAYMENT',
  WAITING_REVIEW: 'WAITING_REVIEW',
  PROCESSING_PAYMENT: 'PROCESSING_PAYMENT',
  PAYMENT_WAITING_USER_ACTION: 'PAYMENT_WAITING_USER_ACTION',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  EXPIRED: 'EXPIRED',
  CANCELED_PAYMENT: 'CANCELED_PAYMENT'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]

}

export type Locales = $Enums.Locales

export const Locales: typeof $Enums.Locales

export type Game = $Enums.Game

export const Game: typeof $Enums.Game

export type Plataform = $Enums.Plataform

export const Plataform: typeof $Enums.Plataform

export type Type = $Enums.Type

export const Type: typeof $Enums.Type

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

export type SessionStatus = $Enums.SessionStatus

export const SessionStatus: typeof $Enums.SessionStatus

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.adminAccess`: Exposes CRUD operations for the **AdminAccess** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminAccesses
    * const adminAccesses = await prisma.adminAccess.findMany()
    * ```
    */
  get adminAccess(): Prisma.AdminAccessDelegate<ExtArgs>;

  /**
   * `prisma.credential`: Exposes CRUD operations for the **Credential** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Credentials
    * const credentials = await prisma.credential.findMany()
    * ```
    */
  get credential(): Prisma.CredentialDelegate<ExtArgs>;

  /**
   * `prisma.productTranslate`: Exposes CRUD operations for the **ProductTranslate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductTranslates
    * const productTranslates = await prisma.productTranslate.findMany()
    * ```
    */
  get productTranslate(): Prisma.ProductTranslateDelegate<ExtArgs>;

  /**
   * `prisma.productCredentials`: Exposes CRUD operations for the **ProductCredentials** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductCredentials
    * const productCredentials = await prisma.productCredentials.findMany()
    * ```
    */
  get productCredentials(): Prisma.ProductCredentialsDelegate<ExtArgs>;

  /**
   * `prisma.service`: Exposes CRUD operations for the **Service** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.service.findMany()
    * ```
    */
  get service(): Prisma.ServiceDelegate<ExtArgs>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.1
   * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    AdminAccess: 'AdminAccess',
    Credential: 'Credential',
    ProductTranslate: 'ProductTranslate',
    ProductCredentials: 'ProductCredentials',
    Service: 'Service',
    Order: 'Order',
    Review: 'Review'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'adminAccess' | 'credential' | 'productTranslate' | 'productCredentials' | 'service' | 'order' | 'review'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      AdminAccess: {
        payload: Prisma.$AdminAccessPayload<ExtArgs>
        fields: Prisma.AdminAccessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminAccessFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminAccessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminAccessFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminAccessPayload>
          }
          findFirst: {
            args: Prisma.AdminAccessFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminAccessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminAccessFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminAccessPayload>
          }
          findMany: {
            args: Prisma.AdminAccessFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminAccessPayload>[]
          }
          create: {
            args: Prisma.AdminAccessCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminAccessPayload>
          }
          createMany: {
            args: Prisma.AdminAccessCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AdminAccessDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminAccessPayload>
          }
          update: {
            args: Prisma.AdminAccessUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminAccessPayload>
          }
          deleteMany: {
            args: Prisma.AdminAccessDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdminAccessUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdminAccessUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminAccessPayload>
          }
          aggregate: {
            args: Prisma.AdminAccessAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdminAccess>
          }
          groupBy: {
            args: Prisma.AdminAccessGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdminAccessGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminAccessCountArgs<ExtArgs>,
            result: $Utils.Optional<AdminAccessCountAggregateOutputType> | number
          }
        }
      }
      Credential: {
        payload: Prisma.$CredentialPayload<ExtArgs>
        fields: Prisma.CredentialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CredentialFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CredentialFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload>
          }
          findFirst: {
            args: Prisma.CredentialFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CredentialFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload>
          }
          findMany: {
            args: Prisma.CredentialFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload>[]
          }
          create: {
            args: Prisma.CredentialCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload>
          }
          createMany: {
            args: Prisma.CredentialCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CredentialDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload>
          }
          update: {
            args: Prisma.CredentialUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload>
          }
          deleteMany: {
            args: Prisma.CredentialDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CredentialUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CredentialUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload>
          }
          aggregate: {
            args: Prisma.CredentialAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCredential>
          }
          groupBy: {
            args: Prisma.CredentialGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CredentialGroupByOutputType>[]
          }
          count: {
            args: Prisma.CredentialCountArgs<ExtArgs>,
            result: $Utils.Optional<CredentialCountAggregateOutputType> | number
          }
        }
      }
      ProductTranslate: {
        payload: Prisma.$ProductTranslatePayload<ExtArgs>
        fields: Prisma.ProductTranslateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductTranslateFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTranslatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductTranslateFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTranslatePayload>
          }
          findFirst: {
            args: Prisma.ProductTranslateFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTranslatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductTranslateFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTranslatePayload>
          }
          findMany: {
            args: Prisma.ProductTranslateFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTranslatePayload>[]
          }
          create: {
            args: Prisma.ProductTranslateCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTranslatePayload>
          }
          createMany: {
            args: Prisma.ProductTranslateCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductTranslateDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTranslatePayload>
          }
          update: {
            args: Prisma.ProductTranslateUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTranslatePayload>
          }
          deleteMany: {
            args: Prisma.ProductTranslateDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductTranslateUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductTranslateUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTranslatePayload>
          }
          aggregate: {
            args: Prisma.ProductTranslateAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductTranslate>
          }
          groupBy: {
            args: Prisma.ProductTranslateGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductTranslateGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductTranslateCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductTranslateCountAggregateOutputType> | number
          }
        }
      }
      ProductCredentials: {
        payload: Prisma.$ProductCredentialsPayload<ExtArgs>
        fields: Prisma.ProductCredentialsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductCredentialsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductCredentialsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductCredentialsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductCredentialsPayload>
          }
          findFirst: {
            args: Prisma.ProductCredentialsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductCredentialsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductCredentialsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductCredentialsPayload>
          }
          findMany: {
            args: Prisma.ProductCredentialsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductCredentialsPayload>[]
          }
          create: {
            args: Prisma.ProductCredentialsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductCredentialsPayload>
          }
          createMany: {
            args: Prisma.ProductCredentialsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductCredentialsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductCredentialsPayload>
          }
          update: {
            args: Prisma.ProductCredentialsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductCredentialsPayload>
          }
          deleteMany: {
            args: Prisma.ProductCredentialsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductCredentialsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductCredentialsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductCredentialsPayload>
          }
          aggregate: {
            args: Prisma.ProductCredentialsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductCredentials>
          }
          groupBy: {
            args: Prisma.ProductCredentialsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductCredentialsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCredentialsCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductCredentialsCountAggregateOutputType> | number
          }
        }
      }
      Service: {
        payload: Prisma.$ServicePayload<ExtArgs>
        fields: Prisma.ServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findFirst: {
            args: Prisma.ServiceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findMany: {
            args: Prisma.ServiceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          create: {
            args: Prisma.ServiceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          createMany: {
            args: Prisma.ServiceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ServiceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          update: {
            args: Prisma.ServiceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          deleteMany: {
            args: Prisma.ServiceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ServiceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          aggregate: {
            args: Prisma.ServiceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateService>
          }
          groupBy: {
            args: Prisma.ServiceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceCountArgs<ExtArgs>,
            result: $Utils.Optional<ServiceCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>,
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>,
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    orders: number
    credentials: number
    services: number
    reviews: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | UserCountOutputTypeCountOrdersArgs
    credentials?: boolean | UserCountOutputTypeCountCredentialsArgs
    services?: boolean | UserCountOutputTypeCountServicesArgs
    reviews?: boolean | UserCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCredentialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CredentialWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }



  /**
   * Count Type CredentialCountOutputType
   */

  export type CredentialCountOutputType = {
    services: number
  }

  export type CredentialCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    services?: boolean | CredentialCountOutputTypeCountServicesArgs
  }

  // Custom InputTypes

  /**
   * CredentialCountOutputType without action
   */
  export type CredentialCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CredentialCountOutputType
     */
    select?: CredentialCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CredentialCountOutputType without action
   */
  export type CredentialCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
  }



  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    services: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    services?: boolean | OrderCountOutputTypeCountServicesArgs
  }

  // Custom InputTypes

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    external_id: string | null
    fullname: string | null
    email: string | null
    password: string | null
    created_at: Date | null
    locale: $Enums.Locales | null
    email_confirmed: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    external_id: string | null
    fullname: string | null
    email: string | null
    password: string | null
    created_at: Date | null
    locale: $Enums.Locales | null
    email_confirmed: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    external_id: number
    fullname: number
    email: number
    password: number
    created_at: number
    locale: number
    email_confirmed: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    external_id?: true
    fullname?: true
    email?: true
    password?: true
    created_at?: true
    locale?: true
    email_confirmed?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    external_id?: true
    fullname?: true
    email?: true
    password?: true
    created_at?: true
    locale?: true
    email_confirmed?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    external_id?: true
    fullname?: true
    email?: true
    password?: true
    created_at?: true
    locale?: true
    email_confirmed?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    external_id: string | null
    fullname: string
    email: string
    password: string | null
    created_at: Date
    locale: $Enums.Locales | null
    email_confirmed: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    external_id?: boolean
    fullname?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    locale?: boolean
    email_confirmed?: boolean
    orders?: boolean | User$ordersArgs<ExtArgs>
    credentials?: boolean | User$credentialsArgs<ExtArgs>
    services?: boolean | User$servicesArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    external_id?: boolean
    fullname?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    locale?: boolean
    email_confirmed?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | User$ordersArgs<ExtArgs>
    credentials?: boolean | User$credentialsArgs<ExtArgs>
    services?: boolean | User$servicesArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      orders: Prisma.$OrderPayload<ExtArgs>[]
      credentials: Prisma.$CredentialPayload<ExtArgs>[]
      services: Prisma.$ServicePayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      external_id: string | null
      fullname: string
      email: string
      password: string | null
      created_at: Date
      locale: $Enums.Locales | null
      email_confirmed: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    orders<T extends User$ordersArgs<ExtArgs> = {}>(args?: Subset<T, User$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findMany'> | Null>;

    credentials<T extends User$credentialsArgs<ExtArgs> = {}>(args?: Subset<T, User$credentialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'findMany'> | Null>;

    services<T extends User$servicesArgs<ExtArgs> = {}>(args?: Subset<T, User$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findMany'> | Null>;

    reviews<T extends User$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly external_id: FieldRef<"User", 'String'>
    readonly fullname: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly locale: FieldRef<"User", 'Locales'>
    readonly email_confirmed: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.orders
   */
  export type User$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * User.credentials
   */
  export type User$credentialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude<ExtArgs> | null
    where?: CredentialWhereInput
    orderBy?: CredentialOrderByWithRelationInput | CredentialOrderByWithRelationInput[]
    cursor?: CredentialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CredentialScalarFieldEnum | CredentialScalarFieldEnum[]
  }


  /**
   * User.services
   */
  export type User$servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    cursor?: ServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }


  /**
   * User.reviews
   */
  export type User$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model AdminAccess
   */

  export type AggregateAdminAccess = {
    _count: AdminAccessCountAggregateOutputType | null
    _avg: AdminAccessAvgAggregateOutputType | null
    _sum: AdminAccessSumAggregateOutputType | null
    _min: AdminAccessMinAggregateOutputType | null
    _max: AdminAccessMaxAggregateOutputType | null
  }

  export type AdminAccessAvgAggregateOutputType = {
    id: number | null
  }

  export type AdminAccessSumAggregateOutputType = {
    id: number | null
  }

  export type AdminAccessMinAggregateOutputType = {
    id: number | null
    external_id: string | null
    fullname: string | null
    email: string | null
    password: string | null
    created_at: Date | null
  }

  export type AdminAccessMaxAggregateOutputType = {
    id: number | null
    external_id: string | null
    fullname: string | null
    email: string | null
    password: string | null
    created_at: Date | null
  }

  export type AdminAccessCountAggregateOutputType = {
    id: number
    external_id: number
    fullname: number
    email: number
    password: number
    created_at: number
    _all: number
  }


  export type AdminAccessAvgAggregateInputType = {
    id?: true
  }

  export type AdminAccessSumAggregateInputType = {
    id?: true
  }

  export type AdminAccessMinAggregateInputType = {
    id?: true
    external_id?: true
    fullname?: true
    email?: true
    password?: true
    created_at?: true
  }

  export type AdminAccessMaxAggregateInputType = {
    id?: true
    external_id?: true
    fullname?: true
    email?: true
    password?: true
    created_at?: true
  }

  export type AdminAccessCountAggregateInputType = {
    id?: true
    external_id?: true
    fullname?: true
    email?: true
    password?: true
    created_at?: true
    _all?: true
  }

  export type AdminAccessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminAccess to aggregate.
     */
    where?: AdminAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminAccesses to fetch.
     */
    orderBy?: AdminAccessOrderByWithRelationInput | AdminAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminAccesses
    **/
    _count?: true | AdminAccessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAccessAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminAccessSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminAccessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminAccessMaxAggregateInputType
  }

  export type GetAdminAccessAggregateType<T extends AdminAccessAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminAccess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminAccess[P]>
      : GetScalarType<T[P], AggregateAdminAccess[P]>
  }




  export type AdminAccessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminAccessWhereInput
    orderBy?: AdminAccessOrderByWithAggregationInput | AdminAccessOrderByWithAggregationInput[]
    by: AdminAccessScalarFieldEnum[] | AdminAccessScalarFieldEnum
    having?: AdminAccessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminAccessCountAggregateInputType | true
    _avg?: AdminAccessAvgAggregateInputType
    _sum?: AdminAccessSumAggregateInputType
    _min?: AdminAccessMinAggregateInputType
    _max?: AdminAccessMaxAggregateInputType
  }

  export type AdminAccessGroupByOutputType = {
    id: number
    external_id: string | null
    fullname: string
    email: string
    password: string
    created_at: Date
    _count: AdminAccessCountAggregateOutputType | null
    _avg: AdminAccessAvgAggregateOutputType | null
    _sum: AdminAccessSumAggregateOutputType | null
    _min: AdminAccessMinAggregateOutputType | null
    _max: AdminAccessMaxAggregateOutputType | null
  }

  type GetAdminAccessGroupByPayload<T extends AdminAccessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminAccessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminAccessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminAccessGroupByOutputType[P]>
            : GetScalarType<T[P], AdminAccessGroupByOutputType[P]>
        }
      >
    >


  export type AdminAccessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    external_id?: boolean
    fullname?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["adminAccess"]>

  export type AdminAccessSelectScalar = {
    id?: boolean
    external_id?: boolean
    fullname?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
  }


  export type $AdminAccessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminAccess"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      external_id: string | null
      fullname: string
      email: string
      password: string
      created_at: Date
    }, ExtArgs["result"]["adminAccess"]>
    composites: {}
  }


  type AdminAccessGetPayload<S extends boolean | null | undefined | AdminAccessDefaultArgs> = $Result.GetResult<Prisma.$AdminAccessPayload, S>

  type AdminAccessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminAccessFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminAccessCountAggregateInputType | true
    }

  export interface AdminAccessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminAccess'], meta: { name: 'AdminAccess' } }
    /**
     * Find zero or one AdminAccess that matches the filter.
     * @param {AdminAccessFindUniqueArgs} args - Arguments to find a AdminAccess
     * @example
     * // Get one AdminAccess
     * const adminAccess = await prisma.adminAccess.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminAccessFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdminAccessFindUniqueArgs<ExtArgs>>
    ): Prisma__AdminAccessClient<$Result.GetResult<Prisma.$AdminAccessPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AdminAccess that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdminAccessFindUniqueOrThrowArgs} args - Arguments to find a AdminAccess
     * @example
     * // Get one AdminAccess
     * const adminAccess = await prisma.adminAccess.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminAccessFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminAccessFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdminAccessClient<$Result.GetResult<Prisma.$AdminAccessPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AdminAccess that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAccessFindFirstArgs} args - Arguments to find a AdminAccess
     * @example
     * // Get one AdminAccess
     * const adminAccess = await prisma.adminAccess.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminAccessFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminAccessFindFirstArgs<ExtArgs>>
    ): Prisma__AdminAccessClient<$Result.GetResult<Prisma.$AdminAccessPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AdminAccess that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAccessFindFirstOrThrowArgs} args - Arguments to find a AdminAccess
     * @example
     * // Get one AdminAccess
     * const adminAccess = await prisma.adminAccess.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminAccessFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminAccessFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdminAccessClient<$Result.GetResult<Prisma.$AdminAccessPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AdminAccesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAccessFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminAccesses
     * const adminAccesses = await prisma.adminAccess.findMany()
     * 
     * // Get first 10 AdminAccesses
     * const adminAccesses = await prisma.adminAccess.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminAccessWithIdOnly = await prisma.adminAccess.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdminAccessFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminAccessFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminAccessPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AdminAccess.
     * @param {AdminAccessCreateArgs} args - Arguments to create a AdminAccess.
     * @example
     * // Create one AdminAccess
     * const AdminAccess = await prisma.adminAccess.create({
     *   data: {
     *     // ... data to create a AdminAccess
     *   }
     * })
     * 
    **/
    create<T extends AdminAccessCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminAccessCreateArgs<ExtArgs>>
    ): Prisma__AdminAccessClient<$Result.GetResult<Prisma.$AdminAccessPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AdminAccesses.
     *     @param {AdminAccessCreateManyArgs} args - Arguments to create many AdminAccesses.
     *     @example
     *     // Create many AdminAccesses
     *     const adminAccess = await prisma.adminAccess.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdminAccessCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminAccessCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AdminAccess.
     * @param {AdminAccessDeleteArgs} args - Arguments to delete one AdminAccess.
     * @example
     * // Delete one AdminAccess
     * const AdminAccess = await prisma.adminAccess.delete({
     *   where: {
     *     // ... filter to delete one AdminAccess
     *   }
     * })
     * 
    **/
    delete<T extends AdminAccessDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdminAccessDeleteArgs<ExtArgs>>
    ): Prisma__AdminAccessClient<$Result.GetResult<Prisma.$AdminAccessPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AdminAccess.
     * @param {AdminAccessUpdateArgs} args - Arguments to update one AdminAccess.
     * @example
     * // Update one AdminAccess
     * const adminAccess = await prisma.adminAccess.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminAccessUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminAccessUpdateArgs<ExtArgs>>
    ): Prisma__AdminAccessClient<$Result.GetResult<Prisma.$AdminAccessPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AdminAccesses.
     * @param {AdminAccessDeleteManyArgs} args - Arguments to filter AdminAccesses to delete.
     * @example
     * // Delete a few AdminAccesses
     * const { count } = await prisma.adminAccess.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminAccessDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminAccessDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAccessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminAccesses
     * const adminAccess = await prisma.adminAccess.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminAccessUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdminAccessUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AdminAccess.
     * @param {AdminAccessUpsertArgs} args - Arguments to update or create a AdminAccess.
     * @example
     * // Update or create a AdminAccess
     * const adminAccess = await prisma.adminAccess.upsert({
     *   create: {
     *     // ... data to create a AdminAccess
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminAccess we want to update
     *   }
     * })
    **/
    upsert<T extends AdminAccessUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdminAccessUpsertArgs<ExtArgs>>
    ): Prisma__AdminAccessClient<$Result.GetResult<Prisma.$AdminAccessPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AdminAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAccessCountArgs} args - Arguments to filter AdminAccesses to count.
     * @example
     * // Count the number of AdminAccesses
     * const count = await prisma.adminAccess.count({
     *   where: {
     *     // ... the filter for the AdminAccesses we want to count
     *   }
     * })
    **/
    count<T extends AdminAccessCountArgs>(
      args?: Subset<T, AdminAccessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminAccessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAccessAggregateArgs>(args: Subset<T, AdminAccessAggregateArgs>): Prisma.PrismaPromise<GetAdminAccessAggregateType<T>>

    /**
     * Group by AdminAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAccessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminAccessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminAccessGroupByArgs['orderBy'] }
        : { orderBy?: AdminAccessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminAccess model
   */
  readonly fields: AdminAccessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminAccess.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminAccessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AdminAccess model
   */ 
  interface AdminAccessFieldRefs {
    readonly id: FieldRef<"AdminAccess", 'Int'>
    readonly external_id: FieldRef<"AdminAccess", 'String'>
    readonly fullname: FieldRef<"AdminAccess", 'String'>
    readonly email: FieldRef<"AdminAccess", 'String'>
    readonly password: FieldRef<"AdminAccess", 'String'>
    readonly created_at: FieldRef<"AdminAccess", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * AdminAccess findUnique
   */
  export type AdminAccessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAccess
     */
    select?: AdminAccessSelect<ExtArgs> | null
    /**
     * Filter, which AdminAccess to fetch.
     */
    where: AdminAccessWhereUniqueInput
  }


  /**
   * AdminAccess findUniqueOrThrow
   */
  export type AdminAccessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAccess
     */
    select?: AdminAccessSelect<ExtArgs> | null
    /**
     * Filter, which AdminAccess to fetch.
     */
    where: AdminAccessWhereUniqueInput
  }


  /**
   * AdminAccess findFirst
   */
  export type AdminAccessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAccess
     */
    select?: AdminAccessSelect<ExtArgs> | null
    /**
     * Filter, which AdminAccess to fetch.
     */
    where?: AdminAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminAccesses to fetch.
     */
    orderBy?: AdminAccessOrderByWithRelationInput | AdminAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminAccesses.
     */
    cursor?: AdminAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminAccesses.
     */
    distinct?: AdminAccessScalarFieldEnum | AdminAccessScalarFieldEnum[]
  }


  /**
   * AdminAccess findFirstOrThrow
   */
  export type AdminAccessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAccess
     */
    select?: AdminAccessSelect<ExtArgs> | null
    /**
     * Filter, which AdminAccess to fetch.
     */
    where?: AdminAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminAccesses to fetch.
     */
    orderBy?: AdminAccessOrderByWithRelationInput | AdminAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminAccesses.
     */
    cursor?: AdminAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminAccesses.
     */
    distinct?: AdminAccessScalarFieldEnum | AdminAccessScalarFieldEnum[]
  }


  /**
   * AdminAccess findMany
   */
  export type AdminAccessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAccess
     */
    select?: AdminAccessSelect<ExtArgs> | null
    /**
     * Filter, which AdminAccesses to fetch.
     */
    where?: AdminAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminAccesses to fetch.
     */
    orderBy?: AdminAccessOrderByWithRelationInput | AdminAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminAccesses.
     */
    cursor?: AdminAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminAccesses.
     */
    skip?: number
    distinct?: AdminAccessScalarFieldEnum | AdminAccessScalarFieldEnum[]
  }


  /**
   * AdminAccess create
   */
  export type AdminAccessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAccess
     */
    select?: AdminAccessSelect<ExtArgs> | null
    /**
     * The data needed to create a AdminAccess.
     */
    data: XOR<AdminAccessCreateInput, AdminAccessUncheckedCreateInput>
  }


  /**
   * AdminAccess createMany
   */
  export type AdminAccessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminAccesses.
     */
    data: AdminAccessCreateManyInput | AdminAccessCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AdminAccess update
   */
  export type AdminAccessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAccess
     */
    select?: AdminAccessSelect<ExtArgs> | null
    /**
     * The data needed to update a AdminAccess.
     */
    data: XOR<AdminAccessUpdateInput, AdminAccessUncheckedUpdateInput>
    /**
     * Choose, which AdminAccess to update.
     */
    where: AdminAccessWhereUniqueInput
  }


  /**
   * AdminAccess updateMany
   */
  export type AdminAccessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminAccesses.
     */
    data: XOR<AdminAccessUpdateManyMutationInput, AdminAccessUncheckedUpdateManyInput>
    /**
     * Filter which AdminAccesses to update
     */
    where?: AdminAccessWhereInput
  }


  /**
   * AdminAccess upsert
   */
  export type AdminAccessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAccess
     */
    select?: AdminAccessSelect<ExtArgs> | null
    /**
     * The filter to search for the AdminAccess to update in case it exists.
     */
    where: AdminAccessWhereUniqueInput
    /**
     * In case the AdminAccess found by the `where` argument doesn't exist, create a new AdminAccess with this data.
     */
    create: XOR<AdminAccessCreateInput, AdminAccessUncheckedCreateInput>
    /**
     * In case the AdminAccess was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminAccessUpdateInput, AdminAccessUncheckedUpdateInput>
  }


  /**
   * AdminAccess delete
   */
  export type AdminAccessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAccess
     */
    select?: AdminAccessSelect<ExtArgs> | null
    /**
     * Filter which AdminAccess to delete.
     */
    where: AdminAccessWhereUniqueInput
  }


  /**
   * AdminAccess deleteMany
   */
  export type AdminAccessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminAccesses to delete
     */
    where?: AdminAccessWhereInput
  }


  /**
   * AdminAccess without action
   */
  export type AdminAccessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAccess
     */
    select?: AdminAccessSelect<ExtArgs> | null
  }



  /**
   * Model Credential
   */

  export type AggregateCredential = {
    _count: CredentialCountAggregateOutputType | null
    _avg: CredentialAvgAggregateOutputType | null
    _sum: CredentialSumAggregateOutputType | null
    _min: CredentialMinAggregateOutputType | null
    _max: CredentialMaxAggregateOutputType | null
  }

  export type CredentialAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type CredentialSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type CredentialMinAggregateOutputType = {
    id: number | null
    external_id: string | null
    user_id: number | null
    game: $Enums.Game | null
    plataform: $Enums.Plataform | null
    store: string | null
    email: string | null
    password: Buffer | null
    nickname: string | null
    observations: string | null
    created_at: Date | null
    active: boolean | null
  }

  export type CredentialMaxAggregateOutputType = {
    id: number | null
    external_id: string | null
    user_id: number | null
    game: $Enums.Game | null
    plataform: $Enums.Plataform | null
    store: string | null
    email: string | null
    password: Buffer | null
    nickname: string | null
    observations: string | null
    created_at: Date | null
    active: boolean | null
  }

  export type CredentialCountAggregateOutputType = {
    id: number
    external_id: number
    user_id: number
    game: number
    plataform: number
    store: number
    email: number
    password: number
    nickname: number
    observations: number
    created_at: number
    active: number
    _all: number
  }


  export type CredentialAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type CredentialSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type CredentialMinAggregateInputType = {
    id?: true
    external_id?: true
    user_id?: true
    game?: true
    plataform?: true
    store?: true
    email?: true
    password?: true
    nickname?: true
    observations?: true
    created_at?: true
    active?: true
  }

  export type CredentialMaxAggregateInputType = {
    id?: true
    external_id?: true
    user_id?: true
    game?: true
    plataform?: true
    store?: true
    email?: true
    password?: true
    nickname?: true
    observations?: true
    created_at?: true
    active?: true
  }

  export type CredentialCountAggregateInputType = {
    id?: true
    external_id?: true
    user_id?: true
    game?: true
    plataform?: true
    store?: true
    email?: true
    password?: true
    nickname?: true
    observations?: true
    created_at?: true
    active?: true
    _all?: true
  }

  export type CredentialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Credential to aggregate.
     */
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     */
    orderBy?: CredentialOrderByWithRelationInput | CredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Credentials
    **/
    _count?: true | CredentialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CredentialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CredentialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CredentialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CredentialMaxAggregateInputType
  }

  export type GetCredentialAggregateType<T extends CredentialAggregateArgs> = {
        [P in keyof T & keyof AggregateCredential]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCredential[P]>
      : GetScalarType<T[P], AggregateCredential[P]>
  }




  export type CredentialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CredentialWhereInput
    orderBy?: CredentialOrderByWithAggregationInput | CredentialOrderByWithAggregationInput[]
    by: CredentialScalarFieldEnum[] | CredentialScalarFieldEnum
    having?: CredentialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CredentialCountAggregateInputType | true
    _avg?: CredentialAvgAggregateInputType
    _sum?: CredentialSumAggregateInputType
    _min?: CredentialMinAggregateInputType
    _max?: CredentialMaxAggregateInputType
  }

  export type CredentialGroupByOutputType = {
    id: number
    external_id: string | null
    user_id: number
    game: $Enums.Game
    plataform: $Enums.Plataform
    store: string | null
    email: string
    password: Buffer
    nickname: string
    observations: string | null
    created_at: Date
    active: boolean
    _count: CredentialCountAggregateOutputType | null
    _avg: CredentialAvgAggregateOutputType | null
    _sum: CredentialSumAggregateOutputType | null
    _min: CredentialMinAggregateOutputType | null
    _max: CredentialMaxAggregateOutputType | null
  }

  type GetCredentialGroupByPayload<T extends CredentialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CredentialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CredentialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CredentialGroupByOutputType[P]>
            : GetScalarType<T[P], CredentialGroupByOutputType[P]>
        }
      >
    >


  export type CredentialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    external_id?: boolean
    user_id?: boolean
    game?: boolean
    plataform?: boolean
    store?: boolean
    email?: boolean
    password?: boolean
    nickname?: boolean
    observations?: boolean
    created_at?: boolean
    active?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    services?: boolean | Credential$servicesArgs<ExtArgs>
    _count?: boolean | CredentialCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["credential"]>

  export type CredentialSelectScalar = {
    id?: boolean
    external_id?: boolean
    user_id?: boolean
    game?: boolean
    plataform?: boolean
    store?: boolean
    email?: boolean
    password?: boolean
    nickname?: boolean
    observations?: boolean
    created_at?: boolean
    active?: boolean
  }

  export type CredentialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    services?: boolean | Credential$servicesArgs<ExtArgs>
    _count?: boolean | CredentialCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CredentialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Credential"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      services: Prisma.$ServicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      external_id: string | null
      user_id: number
      game: $Enums.Game
      plataform: $Enums.Plataform
      store: string | null
      email: string
      password: Buffer
      nickname: string
      observations: string | null
      created_at: Date
      active: boolean
    }, ExtArgs["result"]["credential"]>
    composites: {}
  }


  type CredentialGetPayload<S extends boolean | null | undefined | CredentialDefaultArgs> = $Result.GetResult<Prisma.$CredentialPayload, S>

  type CredentialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CredentialFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CredentialCountAggregateInputType | true
    }

  export interface CredentialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Credential'], meta: { name: 'Credential' } }
    /**
     * Find zero or one Credential that matches the filter.
     * @param {CredentialFindUniqueArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CredentialFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialFindUniqueArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Credential that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CredentialFindUniqueOrThrowArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CredentialFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Credential that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialFindFirstArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CredentialFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialFindFirstArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Credential that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialFindFirstOrThrowArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CredentialFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Credentials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Credentials
     * const credentials = await prisma.credential.findMany()
     * 
     * // Get first 10 Credentials
     * const credentials = await prisma.credential.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const credentialWithIdOnly = await prisma.credential.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CredentialFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Credential.
     * @param {CredentialCreateArgs} args - Arguments to create a Credential.
     * @example
     * // Create one Credential
     * const Credential = await prisma.credential.create({
     *   data: {
     *     // ... data to create a Credential
     *   }
     * })
     * 
    **/
    create<T extends CredentialCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialCreateArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Credentials.
     *     @param {CredentialCreateManyArgs} args - Arguments to create many Credentials.
     *     @example
     *     // Create many Credentials
     *     const credential = await prisma.credential.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CredentialCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Credential.
     * @param {CredentialDeleteArgs} args - Arguments to delete one Credential.
     * @example
     * // Delete one Credential
     * const Credential = await prisma.credential.delete({
     *   where: {
     *     // ... filter to delete one Credential
     *   }
     * })
     * 
    **/
    delete<T extends CredentialDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialDeleteArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Credential.
     * @param {CredentialUpdateArgs} args - Arguments to update one Credential.
     * @example
     * // Update one Credential
     * const credential = await prisma.credential.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CredentialUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialUpdateArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Credentials.
     * @param {CredentialDeleteManyArgs} args - Arguments to filter Credentials to delete.
     * @example
     * // Delete a few Credentials
     * const { count } = await prisma.credential.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CredentialDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Credentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Credentials
     * const credential = await prisma.credential.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CredentialUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Credential.
     * @param {CredentialUpsertArgs} args - Arguments to update or create a Credential.
     * @example
     * // Update or create a Credential
     * const credential = await prisma.credential.upsert({
     *   create: {
     *     // ... data to create a Credential
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Credential we want to update
     *   }
     * })
    **/
    upsert<T extends CredentialUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialUpsertArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Credentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialCountArgs} args - Arguments to filter Credentials to count.
     * @example
     * // Count the number of Credentials
     * const count = await prisma.credential.count({
     *   where: {
     *     // ... the filter for the Credentials we want to count
     *   }
     * })
    **/
    count<T extends CredentialCountArgs>(
      args?: Subset<T, CredentialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CredentialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Credential.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CredentialAggregateArgs>(args: Subset<T, CredentialAggregateArgs>): Prisma.PrismaPromise<GetCredentialAggregateType<T>>

    /**
     * Group by Credential.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CredentialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CredentialGroupByArgs['orderBy'] }
        : { orderBy?: CredentialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CredentialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCredentialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Credential model
   */
  readonly fields: CredentialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Credential.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CredentialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    services<T extends Credential$servicesArgs<ExtArgs> = {}>(args?: Subset<T, Credential$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Credential model
   */ 
  interface CredentialFieldRefs {
    readonly id: FieldRef<"Credential", 'Int'>
    readonly external_id: FieldRef<"Credential", 'String'>
    readonly user_id: FieldRef<"Credential", 'Int'>
    readonly game: FieldRef<"Credential", 'Game'>
    readonly plataform: FieldRef<"Credential", 'Plataform'>
    readonly store: FieldRef<"Credential", 'String'>
    readonly email: FieldRef<"Credential", 'String'>
    readonly password: FieldRef<"Credential", 'Bytes'>
    readonly nickname: FieldRef<"Credential", 'String'>
    readonly observations: FieldRef<"Credential", 'String'>
    readonly created_at: FieldRef<"Credential", 'DateTime'>
    readonly active: FieldRef<"Credential", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Credential findUnique
   */
  export type CredentialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * Filter, which Credential to fetch.
     */
    where: CredentialWhereUniqueInput
  }


  /**
   * Credential findUniqueOrThrow
   */
  export type CredentialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * Filter, which Credential to fetch.
     */
    where: CredentialWhereUniqueInput
  }


  /**
   * Credential findFirst
   */
  export type CredentialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * Filter, which Credential to fetch.
     */
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     */
    orderBy?: CredentialOrderByWithRelationInput | CredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Credentials.
     */
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Credentials.
     */
    distinct?: CredentialScalarFieldEnum | CredentialScalarFieldEnum[]
  }


  /**
   * Credential findFirstOrThrow
   */
  export type CredentialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * Filter, which Credential to fetch.
     */
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     */
    orderBy?: CredentialOrderByWithRelationInput | CredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Credentials.
     */
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Credentials.
     */
    distinct?: CredentialScalarFieldEnum | CredentialScalarFieldEnum[]
  }


  /**
   * Credential findMany
   */
  export type CredentialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * Filter, which Credentials to fetch.
     */
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     */
    orderBy?: CredentialOrderByWithRelationInput | CredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Credentials.
     */
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     */
    skip?: number
    distinct?: CredentialScalarFieldEnum | CredentialScalarFieldEnum[]
  }


  /**
   * Credential create
   */
  export type CredentialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * The data needed to create a Credential.
     */
    data: XOR<CredentialCreateInput, CredentialUncheckedCreateInput>
  }


  /**
   * Credential createMany
   */
  export type CredentialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Credentials.
     */
    data: CredentialCreateManyInput | CredentialCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Credential update
   */
  export type CredentialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * The data needed to update a Credential.
     */
    data: XOR<CredentialUpdateInput, CredentialUncheckedUpdateInput>
    /**
     * Choose, which Credential to update.
     */
    where: CredentialWhereUniqueInput
  }


  /**
   * Credential updateMany
   */
  export type CredentialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Credentials.
     */
    data: XOR<CredentialUpdateManyMutationInput, CredentialUncheckedUpdateManyInput>
    /**
     * Filter which Credentials to update
     */
    where?: CredentialWhereInput
  }


  /**
   * Credential upsert
   */
  export type CredentialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * The filter to search for the Credential to update in case it exists.
     */
    where: CredentialWhereUniqueInput
    /**
     * In case the Credential found by the `where` argument doesn't exist, create a new Credential with this data.
     */
    create: XOR<CredentialCreateInput, CredentialUncheckedCreateInput>
    /**
     * In case the Credential was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CredentialUpdateInput, CredentialUncheckedUpdateInput>
  }


  /**
   * Credential delete
   */
  export type CredentialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * Filter which Credential to delete.
     */
    where: CredentialWhereUniqueInput
  }


  /**
   * Credential deleteMany
   */
  export type CredentialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Credentials to delete
     */
    where?: CredentialWhereInput
  }


  /**
   * Credential.services
   */
  export type Credential$servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    cursor?: ServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }


  /**
   * Credential without action
   */
  export type CredentialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude<ExtArgs> | null
  }



  /**
   * Model ProductTranslate
   */

  export type AggregateProductTranslate = {
    _count: ProductTranslateCountAggregateOutputType | null
    _avg: ProductTranslateAvgAggregateOutputType | null
    _sum: ProductTranslateSumAggregateOutputType | null
    _min: ProductTranslateMinAggregateOutputType | null
    _max: ProductTranslateMaxAggregateOutputType | null
  }

  export type ProductTranslateAvgAggregateOutputType = {
    id: number | null
  }

  export type ProductTranslateSumAggregateOutputType = {
    id: number | null
  }

  export type ProductTranslateMinAggregateOutputType = {
    id: number | null
    stripe_product: string | null
    name: string | null
    subtitle: string | null
    description: string | null
    game: $Enums.Game | null
    plataform: $Enums.Plataform | null
    type: $Enums.Type | null
  }

  export type ProductTranslateMaxAggregateOutputType = {
    id: number | null
    stripe_product: string | null
    name: string | null
    subtitle: string | null
    description: string | null
    game: $Enums.Game | null
    plataform: $Enums.Plataform | null
    type: $Enums.Type | null
  }

  export type ProductTranslateCountAggregateOutputType = {
    id: number
    stripe_product: number
    name: number
    subtitle: number
    description: number
    game: number
    plataform: number
    type: number
    _all: number
  }


  export type ProductTranslateAvgAggregateInputType = {
    id?: true
  }

  export type ProductTranslateSumAggregateInputType = {
    id?: true
  }

  export type ProductTranslateMinAggregateInputType = {
    id?: true
    stripe_product?: true
    name?: true
    subtitle?: true
    description?: true
    game?: true
    plataform?: true
    type?: true
  }

  export type ProductTranslateMaxAggregateInputType = {
    id?: true
    stripe_product?: true
    name?: true
    subtitle?: true
    description?: true
    game?: true
    plataform?: true
    type?: true
  }

  export type ProductTranslateCountAggregateInputType = {
    id?: true
    stripe_product?: true
    name?: true
    subtitle?: true
    description?: true
    game?: true
    plataform?: true
    type?: true
    _all?: true
  }

  export type ProductTranslateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductTranslate to aggregate.
     */
    where?: ProductTranslateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTranslates to fetch.
     */
    orderBy?: ProductTranslateOrderByWithRelationInput | ProductTranslateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductTranslateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTranslates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTranslates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductTranslates
    **/
    _count?: true | ProductTranslateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductTranslateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductTranslateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductTranslateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductTranslateMaxAggregateInputType
  }

  export type GetProductTranslateAggregateType<T extends ProductTranslateAggregateArgs> = {
        [P in keyof T & keyof AggregateProductTranslate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductTranslate[P]>
      : GetScalarType<T[P], AggregateProductTranslate[P]>
  }




  export type ProductTranslateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductTranslateWhereInput
    orderBy?: ProductTranslateOrderByWithAggregationInput | ProductTranslateOrderByWithAggregationInput[]
    by: ProductTranslateScalarFieldEnum[] | ProductTranslateScalarFieldEnum
    having?: ProductTranslateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductTranslateCountAggregateInputType | true
    _avg?: ProductTranslateAvgAggregateInputType
    _sum?: ProductTranslateSumAggregateInputType
    _min?: ProductTranslateMinAggregateInputType
    _max?: ProductTranslateMaxAggregateInputType
  }

  export type ProductTranslateGroupByOutputType = {
    id: number
    stripe_product: string
    name: string
    subtitle: string
    description: string
    game: $Enums.Game
    plataform: $Enums.Plataform
    type: $Enums.Type
    _count: ProductTranslateCountAggregateOutputType | null
    _avg: ProductTranslateAvgAggregateOutputType | null
    _sum: ProductTranslateSumAggregateOutputType | null
    _min: ProductTranslateMinAggregateOutputType | null
    _max: ProductTranslateMaxAggregateOutputType | null
  }

  type GetProductTranslateGroupByPayload<T extends ProductTranslateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductTranslateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductTranslateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductTranslateGroupByOutputType[P]>
            : GetScalarType<T[P], ProductTranslateGroupByOutputType[P]>
        }
      >
    >


  export type ProductTranslateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stripe_product?: boolean
    name?: boolean
    subtitle?: boolean
    description?: boolean
    game?: boolean
    plataform?: boolean
    type?: boolean
  }, ExtArgs["result"]["productTranslate"]>

  export type ProductTranslateSelectScalar = {
    id?: boolean
    stripe_product?: boolean
    name?: boolean
    subtitle?: boolean
    description?: boolean
    game?: boolean
    plataform?: boolean
    type?: boolean
  }


  export type $ProductTranslatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductTranslate"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      stripe_product: string
      name: string
      subtitle: string
      description: string
      game: $Enums.Game
      plataform: $Enums.Plataform
      type: $Enums.Type
    }, ExtArgs["result"]["productTranslate"]>
    composites: {}
  }


  type ProductTranslateGetPayload<S extends boolean | null | undefined | ProductTranslateDefaultArgs> = $Result.GetResult<Prisma.$ProductTranslatePayload, S>

  type ProductTranslateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductTranslateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductTranslateCountAggregateInputType | true
    }

  export interface ProductTranslateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductTranslate'], meta: { name: 'ProductTranslate' } }
    /**
     * Find zero or one ProductTranslate that matches the filter.
     * @param {ProductTranslateFindUniqueArgs} args - Arguments to find a ProductTranslate
     * @example
     * // Get one ProductTranslate
     * const productTranslate = await prisma.productTranslate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductTranslateFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductTranslateFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductTranslateClient<$Result.GetResult<Prisma.$ProductTranslatePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProductTranslate that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductTranslateFindUniqueOrThrowArgs} args - Arguments to find a ProductTranslate
     * @example
     * // Get one ProductTranslate
     * const productTranslate = await prisma.productTranslate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductTranslateFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductTranslateFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductTranslateClient<$Result.GetResult<Prisma.$ProductTranslatePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProductTranslate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTranslateFindFirstArgs} args - Arguments to find a ProductTranslate
     * @example
     * // Get one ProductTranslate
     * const productTranslate = await prisma.productTranslate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductTranslateFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductTranslateFindFirstArgs<ExtArgs>>
    ): Prisma__ProductTranslateClient<$Result.GetResult<Prisma.$ProductTranslatePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProductTranslate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTranslateFindFirstOrThrowArgs} args - Arguments to find a ProductTranslate
     * @example
     * // Get one ProductTranslate
     * const productTranslate = await prisma.productTranslate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductTranslateFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductTranslateFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductTranslateClient<$Result.GetResult<Prisma.$ProductTranslatePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProductTranslates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTranslateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductTranslates
     * const productTranslates = await prisma.productTranslate.findMany()
     * 
     * // Get first 10 ProductTranslates
     * const productTranslates = await prisma.productTranslate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productTranslateWithIdOnly = await prisma.productTranslate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductTranslateFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductTranslateFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductTranslatePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProductTranslate.
     * @param {ProductTranslateCreateArgs} args - Arguments to create a ProductTranslate.
     * @example
     * // Create one ProductTranslate
     * const ProductTranslate = await prisma.productTranslate.create({
     *   data: {
     *     // ... data to create a ProductTranslate
     *   }
     * })
     * 
    **/
    create<T extends ProductTranslateCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductTranslateCreateArgs<ExtArgs>>
    ): Prisma__ProductTranslateClient<$Result.GetResult<Prisma.$ProductTranslatePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProductTranslates.
     *     @param {ProductTranslateCreateManyArgs} args - Arguments to create many ProductTranslates.
     *     @example
     *     // Create many ProductTranslates
     *     const productTranslate = await prisma.productTranslate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductTranslateCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductTranslateCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductTranslate.
     * @param {ProductTranslateDeleteArgs} args - Arguments to delete one ProductTranslate.
     * @example
     * // Delete one ProductTranslate
     * const ProductTranslate = await prisma.productTranslate.delete({
     *   where: {
     *     // ... filter to delete one ProductTranslate
     *   }
     * })
     * 
    **/
    delete<T extends ProductTranslateDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductTranslateDeleteArgs<ExtArgs>>
    ): Prisma__ProductTranslateClient<$Result.GetResult<Prisma.$ProductTranslatePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProductTranslate.
     * @param {ProductTranslateUpdateArgs} args - Arguments to update one ProductTranslate.
     * @example
     * // Update one ProductTranslate
     * const productTranslate = await prisma.productTranslate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductTranslateUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductTranslateUpdateArgs<ExtArgs>>
    ): Prisma__ProductTranslateClient<$Result.GetResult<Prisma.$ProductTranslatePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProductTranslates.
     * @param {ProductTranslateDeleteManyArgs} args - Arguments to filter ProductTranslates to delete.
     * @example
     * // Delete a few ProductTranslates
     * const { count } = await prisma.productTranslate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductTranslateDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductTranslateDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductTranslates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTranslateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductTranslates
     * const productTranslate = await prisma.productTranslate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductTranslateUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductTranslateUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductTranslate.
     * @param {ProductTranslateUpsertArgs} args - Arguments to update or create a ProductTranslate.
     * @example
     * // Update or create a ProductTranslate
     * const productTranslate = await prisma.productTranslate.upsert({
     *   create: {
     *     // ... data to create a ProductTranslate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductTranslate we want to update
     *   }
     * })
    **/
    upsert<T extends ProductTranslateUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductTranslateUpsertArgs<ExtArgs>>
    ): Prisma__ProductTranslateClient<$Result.GetResult<Prisma.$ProductTranslatePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProductTranslates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTranslateCountArgs} args - Arguments to filter ProductTranslates to count.
     * @example
     * // Count the number of ProductTranslates
     * const count = await prisma.productTranslate.count({
     *   where: {
     *     // ... the filter for the ProductTranslates we want to count
     *   }
     * })
    **/
    count<T extends ProductTranslateCountArgs>(
      args?: Subset<T, ProductTranslateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductTranslateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductTranslate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTranslateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductTranslateAggregateArgs>(args: Subset<T, ProductTranslateAggregateArgs>): Prisma.PrismaPromise<GetProductTranslateAggregateType<T>>

    /**
     * Group by ProductTranslate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTranslateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductTranslateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductTranslateGroupByArgs['orderBy'] }
        : { orderBy?: ProductTranslateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductTranslateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductTranslateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductTranslate model
   */
  readonly fields: ProductTranslateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductTranslate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductTranslateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ProductTranslate model
   */ 
  interface ProductTranslateFieldRefs {
    readonly id: FieldRef<"ProductTranslate", 'Int'>
    readonly stripe_product: FieldRef<"ProductTranslate", 'String'>
    readonly name: FieldRef<"ProductTranslate", 'String'>
    readonly subtitle: FieldRef<"ProductTranslate", 'String'>
    readonly description: FieldRef<"ProductTranslate", 'String'>
    readonly game: FieldRef<"ProductTranslate", 'Game'>
    readonly plataform: FieldRef<"ProductTranslate", 'Plataform'>
    readonly type: FieldRef<"ProductTranslate", 'Type'>
  }
    

  // Custom InputTypes

  /**
   * ProductTranslate findUnique
   */
  export type ProductTranslateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslate
     */
    select?: ProductTranslateSelect<ExtArgs> | null
    /**
     * Filter, which ProductTranslate to fetch.
     */
    where: ProductTranslateWhereUniqueInput
  }


  /**
   * ProductTranslate findUniqueOrThrow
   */
  export type ProductTranslateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslate
     */
    select?: ProductTranslateSelect<ExtArgs> | null
    /**
     * Filter, which ProductTranslate to fetch.
     */
    where: ProductTranslateWhereUniqueInput
  }


  /**
   * ProductTranslate findFirst
   */
  export type ProductTranslateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslate
     */
    select?: ProductTranslateSelect<ExtArgs> | null
    /**
     * Filter, which ProductTranslate to fetch.
     */
    where?: ProductTranslateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTranslates to fetch.
     */
    orderBy?: ProductTranslateOrderByWithRelationInput | ProductTranslateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductTranslates.
     */
    cursor?: ProductTranslateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTranslates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTranslates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductTranslates.
     */
    distinct?: ProductTranslateScalarFieldEnum | ProductTranslateScalarFieldEnum[]
  }


  /**
   * ProductTranslate findFirstOrThrow
   */
  export type ProductTranslateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslate
     */
    select?: ProductTranslateSelect<ExtArgs> | null
    /**
     * Filter, which ProductTranslate to fetch.
     */
    where?: ProductTranslateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTranslates to fetch.
     */
    orderBy?: ProductTranslateOrderByWithRelationInput | ProductTranslateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductTranslates.
     */
    cursor?: ProductTranslateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTranslates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTranslates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductTranslates.
     */
    distinct?: ProductTranslateScalarFieldEnum | ProductTranslateScalarFieldEnum[]
  }


  /**
   * ProductTranslate findMany
   */
  export type ProductTranslateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslate
     */
    select?: ProductTranslateSelect<ExtArgs> | null
    /**
     * Filter, which ProductTranslates to fetch.
     */
    where?: ProductTranslateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTranslates to fetch.
     */
    orderBy?: ProductTranslateOrderByWithRelationInput | ProductTranslateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductTranslates.
     */
    cursor?: ProductTranslateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTranslates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTranslates.
     */
    skip?: number
    distinct?: ProductTranslateScalarFieldEnum | ProductTranslateScalarFieldEnum[]
  }


  /**
   * ProductTranslate create
   */
  export type ProductTranslateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslate
     */
    select?: ProductTranslateSelect<ExtArgs> | null
    /**
     * The data needed to create a ProductTranslate.
     */
    data: XOR<ProductTranslateCreateInput, ProductTranslateUncheckedCreateInput>
  }


  /**
   * ProductTranslate createMany
   */
  export type ProductTranslateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductTranslates.
     */
    data: ProductTranslateCreateManyInput | ProductTranslateCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ProductTranslate update
   */
  export type ProductTranslateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslate
     */
    select?: ProductTranslateSelect<ExtArgs> | null
    /**
     * The data needed to update a ProductTranslate.
     */
    data: XOR<ProductTranslateUpdateInput, ProductTranslateUncheckedUpdateInput>
    /**
     * Choose, which ProductTranslate to update.
     */
    where: ProductTranslateWhereUniqueInput
  }


  /**
   * ProductTranslate updateMany
   */
  export type ProductTranslateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductTranslates.
     */
    data: XOR<ProductTranslateUpdateManyMutationInput, ProductTranslateUncheckedUpdateManyInput>
    /**
     * Filter which ProductTranslates to update
     */
    where?: ProductTranslateWhereInput
  }


  /**
   * ProductTranslate upsert
   */
  export type ProductTranslateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslate
     */
    select?: ProductTranslateSelect<ExtArgs> | null
    /**
     * The filter to search for the ProductTranslate to update in case it exists.
     */
    where: ProductTranslateWhereUniqueInput
    /**
     * In case the ProductTranslate found by the `where` argument doesn't exist, create a new ProductTranslate with this data.
     */
    create: XOR<ProductTranslateCreateInput, ProductTranslateUncheckedCreateInput>
    /**
     * In case the ProductTranslate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductTranslateUpdateInput, ProductTranslateUncheckedUpdateInput>
  }


  /**
   * ProductTranslate delete
   */
  export type ProductTranslateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslate
     */
    select?: ProductTranslateSelect<ExtArgs> | null
    /**
     * Filter which ProductTranslate to delete.
     */
    where: ProductTranslateWhereUniqueInput
  }


  /**
   * ProductTranslate deleteMany
   */
  export type ProductTranslateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductTranslates to delete
     */
    where?: ProductTranslateWhereInput
  }


  /**
   * ProductTranslate without action
   */
  export type ProductTranslateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslate
     */
    select?: ProductTranslateSelect<ExtArgs> | null
  }



  /**
   * Model ProductCredentials
   */

  export type AggregateProductCredentials = {
    _count: ProductCredentialsCountAggregateOutputType | null
    _avg: ProductCredentialsAvgAggregateOutputType | null
    _sum: ProductCredentialsSumAggregateOutputType | null
    _min: ProductCredentialsMinAggregateOutputType | null
    _max: ProductCredentialsMaxAggregateOutputType | null
  }

  export type ProductCredentialsAvgAggregateOutputType = {
    id: number | null
  }

  export type ProductCredentialsSumAggregateOutputType = {
    id: number | null
  }

  export type ProductCredentialsMinAggregateOutputType = {
    id: number | null
    product_id: string | null
    email: string | null
    password: Buffer | null
    nickname: string | null
    plataform: $Enums.Plataform | null
    store: string | null
    created_at: Date | null
    delivered: boolean | null
  }

  export type ProductCredentialsMaxAggregateOutputType = {
    id: number | null
    product_id: string | null
    email: string | null
    password: Buffer | null
    nickname: string | null
    plataform: $Enums.Plataform | null
    store: string | null
    created_at: Date | null
    delivered: boolean | null
  }

  export type ProductCredentialsCountAggregateOutputType = {
    id: number
    product_id: number
    email: number
    password: number
    nickname: number
    plataform: number
    store: number
    created_at: number
    delivered: number
    _all: number
  }


  export type ProductCredentialsAvgAggregateInputType = {
    id?: true
  }

  export type ProductCredentialsSumAggregateInputType = {
    id?: true
  }

  export type ProductCredentialsMinAggregateInputType = {
    id?: true
    product_id?: true
    email?: true
    password?: true
    nickname?: true
    plataform?: true
    store?: true
    created_at?: true
    delivered?: true
  }

  export type ProductCredentialsMaxAggregateInputType = {
    id?: true
    product_id?: true
    email?: true
    password?: true
    nickname?: true
    plataform?: true
    store?: true
    created_at?: true
    delivered?: true
  }

  export type ProductCredentialsCountAggregateInputType = {
    id?: true
    product_id?: true
    email?: true
    password?: true
    nickname?: true
    plataform?: true
    store?: true
    created_at?: true
    delivered?: true
    _all?: true
  }

  export type ProductCredentialsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductCredentials to aggregate.
     */
    where?: ProductCredentialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCredentials to fetch.
     */
    orderBy?: ProductCredentialsOrderByWithRelationInput | ProductCredentialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductCredentialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCredentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCredentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductCredentials
    **/
    _count?: true | ProductCredentialsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductCredentialsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductCredentialsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductCredentialsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductCredentialsMaxAggregateInputType
  }

  export type GetProductCredentialsAggregateType<T extends ProductCredentialsAggregateArgs> = {
        [P in keyof T & keyof AggregateProductCredentials]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductCredentials[P]>
      : GetScalarType<T[P], AggregateProductCredentials[P]>
  }




  export type ProductCredentialsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductCredentialsWhereInput
    orderBy?: ProductCredentialsOrderByWithAggregationInput | ProductCredentialsOrderByWithAggregationInput[]
    by: ProductCredentialsScalarFieldEnum[] | ProductCredentialsScalarFieldEnum
    having?: ProductCredentialsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCredentialsCountAggregateInputType | true
    _avg?: ProductCredentialsAvgAggregateInputType
    _sum?: ProductCredentialsSumAggregateInputType
    _min?: ProductCredentialsMinAggregateInputType
    _max?: ProductCredentialsMaxAggregateInputType
  }

  export type ProductCredentialsGroupByOutputType = {
    id: number
    product_id: string
    email: string
    password: Buffer
    nickname: string
    plataform: $Enums.Plataform
    store: string | null
    created_at: Date
    delivered: boolean
    _count: ProductCredentialsCountAggregateOutputType | null
    _avg: ProductCredentialsAvgAggregateOutputType | null
    _sum: ProductCredentialsSumAggregateOutputType | null
    _min: ProductCredentialsMinAggregateOutputType | null
    _max: ProductCredentialsMaxAggregateOutputType | null
  }

  type GetProductCredentialsGroupByPayload<T extends ProductCredentialsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductCredentialsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductCredentialsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductCredentialsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductCredentialsGroupByOutputType[P]>
        }
      >
    >


  export type ProductCredentialsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    email?: boolean
    password?: boolean
    nickname?: boolean
    plataform?: boolean
    store?: boolean
    created_at?: boolean
    delivered?: boolean
  }, ExtArgs["result"]["productCredentials"]>

  export type ProductCredentialsSelectScalar = {
    id?: boolean
    product_id?: boolean
    email?: boolean
    password?: boolean
    nickname?: boolean
    plataform?: boolean
    store?: boolean
    created_at?: boolean
    delivered?: boolean
  }


  export type $ProductCredentialsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductCredentials"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_id: string
      email: string
      password: Buffer
      nickname: string
      plataform: $Enums.Plataform
      store: string | null
      created_at: Date
      delivered: boolean
    }, ExtArgs["result"]["productCredentials"]>
    composites: {}
  }


  type ProductCredentialsGetPayload<S extends boolean | null | undefined | ProductCredentialsDefaultArgs> = $Result.GetResult<Prisma.$ProductCredentialsPayload, S>

  type ProductCredentialsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductCredentialsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCredentialsCountAggregateInputType | true
    }

  export interface ProductCredentialsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductCredentials'], meta: { name: 'ProductCredentials' } }
    /**
     * Find zero or one ProductCredentials that matches the filter.
     * @param {ProductCredentialsFindUniqueArgs} args - Arguments to find a ProductCredentials
     * @example
     * // Get one ProductCredentials
     * const productCredentials = await prisma.productCredentials.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductCredentialsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductCredentialsFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductCredentialsClient<$Result.GetResult<Prisma.$ProductCredentialsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProductCredentials that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductCredentialsFindUniqueOrThrowArgs} args - Arguments to find a ProductCredentials
     * @example
     * // Get one ProductCredentials
     * const productCredentials = await prisma.productCredentials.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductCredentialsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCredentialsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductCredentialsClient<$Result.GetResult<Prisma.$ProductCredentialsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProductCredentials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCredentialsFindFirstArgs} args - Arguments to find a ProductCredentials
     * @example
     * // Get one ProductCredentials
     * const productCredentials = await prisma.productCredentials.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductCredentialsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCredentialsFindFirstArgs<ExtArgs>>
    ): Prisma__ProductCredentialsClient<$Result.GetResult<Prisma.$ProductCredentialsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProductCredentials that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCredentialsFindFirstOrThrowArgs} args - Arguments to find a ProductCredentials
     * @example
     * // Get one ProductCredentials
     * const productCredentials = await prisma.productCredentials.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductCredentialsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCredentialsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductCredentialsClient<$Result.GetResult<Prisma.$ProductCredentialsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProductCredentials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCredentialsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductCredentials
     * const productCredentials = await prisma.productCredentials.findMany()
     * 
     * // Get first 10 ProductCredentials
     * const productCredentials = await prisma.productCredentials.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productCredentialsWithIdOnly = await prisma.productCredentials.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductCredentialsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCredentialsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductCredentialsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProductCredentials.
     * @param {ProductCredentialsCreateArgs} args - Arguments to create a ProductCredentials.
     * @example
     * // Create one ProductCredentials
     * const ProductCredentials = await prisma.productCredentials.create({
     *   data: {
     *     // ... data to create a ProductCredentials
     *   }
     * })
     * 
    **/
    create<T extends ProductCredentialsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductCredentialsCreateArgs<ExtArgs>>
    ): Prisma__ProductCredentialsClient<$Result.GetResult<Prisma.$ProductCredentialsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProductCredentials.
     *     @param {ProductCredentialsCreateManyArgs} args - Arguments to create many ProductCredentials.
     *     @example
     *     // Create many ProductCredentials
     *     const productCredentials = await prisma.productCredentials.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCredentialsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCredentialsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductCredentials.
     * @param {ProductCredentialsDeleteArgs} args - Arguments to delete one ProductCredentials.
     * @example
     * // Delete one ProductCredentials
     * const ProductCredentials = await prisma.productCredentials.delete({
     *   where: {
     *     // ... filter to delete one ProductCredentials
     *   }
     * })
     * 
    **/
    delete<T extends ProductCredentialsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductCredentialsDeleteArgs<ExtArgs>>
    ): Prisma__ProductCredentialsClient<$Result.GetResult<Prisma.$ProductCredentialsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProductCredentials.
     * @param {ProductCredentialsUpdateArgs} args - Arguments to update one ProductCredentials.
     * @example
     * // Update one ProductCredentials
     * const productCredentials = await prisma.productCredentials.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductCredentialsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductCredentialsUpdateArgs<ExtArgs>>
    ): Prisma__ProductCredentialsClient<$Result.GetResult<Prisma.$ProductCredentialsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProductCredentials.
     * @param {ProductCredentialsDeleteManyArgs} args - Arguments to filter ProductCredentials to delete.
     * @example
     * // Delete a few ProductCredentials
     * const { count } = await prisma.productCredentials.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductCredentialsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCredentialsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductCredentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCredentialsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductCredentials
     * const productCredentials = await prisma.productCredentials.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductCredentialsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductCredentialsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductCredentials.
     * @param {ProductCredentialsUpsertArgs} args - Arguments to update or create a ProductCredentials.
     * @example
     * // Update or create a ProductCredentials
     * const productCredentials = await prisma.productCredentials.upsert({
     *   create: {
     *     // ... data to create a ProductCredentials
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductCredentials we want to update
     *   }
     * })
    **/
    upsert<T extends ProductCredentialsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductCredentialsUpsertArgs<ExtArgs>>
    ): Prisma__ProductCredentialsClient<$Result.GetResult<Prisma.$ProductCredentialsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProductCredentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCredentialsCountArgs} args - Arguments to filter ProductCredentials to count.
     * @example
     * // Count the number of ProductCredentials
     * const count = await prisma.productCredentials.count({
     *   where: {
     *     // ... the filter for the ProductCredentials we want to count
     *   }
     * })
    **/
    count<T extends ProductCredentialsCountArgs>(
      args?: Subset<T, ProductCredentialsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCredentialsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductCredentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCredentialsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductCredentialsAggregateArgs>(args: Subset<T, ProductCredentialsAggregateArgs>): Prisma.PrismaPromise<GetProductCredentialsAggregateType<T>>

    /**
     * Group by ProductCredentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCredentialsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductCredentialsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductCredentialsGroupByArgs['orderBy'] }
        : { orderBy?: ProductCredentialsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductCredentialsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductCredentialsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductCredentials model
   */
  readonly fields: ProductCredentialsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductCredentials.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductCredentialsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ProductCredentials model
   */ 
  interface ProductCredentialsFieldRefs {
    readonly id: FieldRef<"ProductCredentials", 'Int'>
    readonly product_id: FieldRef<"ProductCredentials", 'String'>
    readonly email: FieldRef<"ProductCredentials", 'String'>
    readonly password: FieldRef<"ProductCredentials", 'Bytes'>
    readonly nickname: FieldRef<"ProductCredentials", 'String'>
    readonly plataform: FieldRef<"ProductCredentials", 'Plataform'>
    readonly store: FieldRef<"ProductCredentials", 'String'>
    readonly created_at: FieldRef<"ProductCredentials", 'DateTime'>
    readonly delivered: FieldRef<"ProductCredentials", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * ProductCredentials findUnique
   */
  export type ProductCredentialsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCredentials
     */
    select?: ProductCredentialsSelect<ExtArgs> | null
    /**
     * Filter, which ProductCredentials to fetch.
     */
    where: ProductCredentialsWhereUniqueInput
  }


  /**
   * ProductCredentials findUniqueOrThrow
   */
  export type ProductCredentialsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCredentials
     */
    select?: ProductCredentialsSelect<ExtArgs> | null
    /**
     * Filter, which ProductCredentials to fetch.
     */
    where: ProductCredentialsWhereUniqueInput
  }


  /**
   * ProductCredentials findFirst
   */
  export type ProductCredentialsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCredentials
     */
    select?: ProductCredentialsSelect<ExtArgs> | null
    /**
     * Filter, which ProductCredentials to fetch.
     */
    where?: ProductCredentialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCredentials to fetch.
     */
    orderBy?: ProductCredentialsOrderByWithRelationInput | ProductCredentialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductCredentials.
     */
    cursor?: ProductCredentialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCredentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCredentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductCredentials.
     */
    distinct?: ProductCredentialsScalarFieldEnum | ProductCredentialsScalarFieldEnum[]
  }


  /**
   * ProductCredentials findFirstOrThrow
   */
  export type ProductCredentialsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCredentials
     */
    select?: ProductCredentialsSelect<ExtArgs> | null
    /**
     * Filter, which ProductCredentials to fetch.
     */
    where?: ProductCredentialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCredentials to fetch.
     */
    orderBy?: ProductCredentialsOrderByWithRelationInput | ProductCredentialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductCredentials.
     */
    cursor?: ProductCredentialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCredentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCredentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductCredentials.
     */
    distinct?: ProductCredentialsScalarFieldEnum | ProductCredentialsScalarFieldEnum[]
  }


  /**
   * ProductCredentials findMany
   */
  export type ProductCredentialsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCredentials
     */
    select?: ProductCredentialsSelect<ExtArgs> | null
    /**
     * Filter, which ProductCredentials to fetch.
     */
    where?: ProductCredentialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCredentials to fetch.
     */
    orderBy?: ProductCredentialsOrderByWithRelationInput | ProductCredentialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductCredentials.
     */
    cursor?: ProductCredentialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCredentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCredentials.
     */
    skip?: number
    distinct?: ProductCredentialsScalarFieldEnum | ProductCredentialsScalarFieldEnum[]
  }


  /**
   * ProductCredentials create
   */
  export type ProductCredentialsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCredentials
     */
    select?: ProductCredentialsSelect<ExtArgs> | null
    /**
     * The data needed to create a ProductCredentials.
     */
    data: XOR<ProductCredentialsCreateInput, ProductCredentialsUncheckedCreateInput>
  }


  /**
   * ProductCredentials createMany
   */
  export type ProductCredentialsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductCredentials.
     */
    data: ProductCredentialsCreateManyInput | ProductCredentialsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ProductCredentials update
   */
  export type ProductCredentialsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCredentials
     */
    select?: ProductCredentialsSelect<ExtArgs> | null
    /**
     * The data needed to update a ProductCredentials.
     */
    data: XOR<ProductCredentialsUpdateInput, ProductCredentialsUncheckedUpdateInput>
    /**
     * Choose, which ProductCredentials to update.
     */
    where: ProductCredentialsWhereUniqueInput
  }


  /**
   * ProductCredentials updateMany
   */
  export type ProductCredentialsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductCredentials.
     */
    data: XOR<ProductCredentialsUpdateManyMutationInput, ProductCredentialsUncheckedUpdateManyInput>
    /**
     * Filter which ProductCredentials to update
     */
    where?: ProductCredentialsWhereInput
  }


  /**
   * ProductCredentials upsert
   */
  export type ProductCredentialsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCredentials
     */
    select?: ProductCredentialsSelect<ExtArgs> | null
    /**
     * The filter to search for the ProductCredentials to update in case it exists.
     */
    where: ProductCredentialsWhereUniqueInput
    /**
     * In case the ProductCredentials found by the `where` argument doesn't exist, create a new ProductCredentials with this data.
     */
    create: XOR<ProductCredentialsCreateInput, ProductCredentialsUncheckedCreateInput>
    /**
     * In case the ProductCredentials was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductCredentialsUpdateInput, ProductCredentialsUncheckedUpdateInput>
  }


  /**
   * ProductCredentials delete
   */
  export type ProductCredentialsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCredentials
     */
    select?: ProductCredentialsSelect<ExtArgs> | null
    /**
     * Filter which ProductCredentials to delete.
     */
    where: ProductCredentialsWhereUniqueInput
  }


  /**
   * ProductCredentials deleteMany
   */
  export type ProductCredentialsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductCredentials to delete
     */
    where?: ProductCredentialsWhereInput
  }


  /**
   * ProductCredentials without action
   */
  export type ProductCredentialsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCredentials
     */
    select?: ProductCredentialsSelect<ExtArgs> | null
  }



  /**
   * Model Service
   */

  export type AggregateService = {
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  export type ServiceAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    order_id: number | null
    credential_id: number | null
  }

  export type ServiceSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    order_id: number | null
    credential_id: number | null
  }

  export type ServiceMinAggregateOutputType = {
    id: number | null
    external_id: string | null
    user_id: number | null
    order_id: number | null
    credential_id: number | null
    type: $Enums.Type | null
    game: $Enums.Game | null
    plataform: $Enums.Plataform | null
    product_id: string | null
    status: $Enums.Status | null
    created_at: Date | null
  }

  export type ServiceMaxAggregateOutputType = {
    id: number | null
    external_id: string | null
    user_id: number | null
    order_id: number | null
    credential_id: number | null
    type: $Enums.Type | null
    game: $Enums.Game | null
    plataform: $Enums.Plataform | null
    product_id: string | null
    status: $Enums.Status | null
    created_at: Date | null
  }

  export type ServiceCountAggregateOutputType = {
    id: number
    external_id: number
    user_id: number
    order_id: number
    credential_id: number
    type: number
    game: number
    plataform: number
    product_id: number
    status: number
    created_at: number
    _all: number
  }


  export type ServiceAvgAggregateInputType = {
    id?: true
    user_id?: true
    order_id?: true
    credential_id?: true
  }

  export type ServiceSumAggregateInputType = {
    id?: true
    user_id?: true
    order_id?: true
    credential_id?: true
  }

  export type ServiceMinAggregateInputType = {
    id?: true
    external_id?: true
    user_id?: true
    order_id?: true
    credential_id?: true
    type?: true
    game?: true
    plataform?: true
    product_id?: true
    status?: true
    created_at?: true
  }

  export type ServiceMaxAggregateInputType = {
    id?: true
    external_id?: true
    user_id?: true
    order_id?: true
    credential_id?: true
    type?: true
    game?: true
    plataform?: true
    product_id?: true
    status?: true
    created_at?: true
  }

  export type ServiceCountAggregateInputType = {
    id?: true
    external_id?: true
    user_id?: true
    order_id?: true
    credential_id?: true
    type?: true
    game?: true
    plataform?: true
    product_id?: true
    status?: true
    created_at?: true
    _all?: true
  }

  export type ServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Service to aggregate.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Services
    **/
    _count?: true | ServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceMaxAggregateInputType
  }

  export type GetServiceAggregateType<T extends ServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateService[P]>
      : GetScalarType<T[P], AggregateService[P]>
  }




  export type ServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithAggregationInput | ServiceOrderByWithAggregationInput[]
    by: ServiceScalarFieldEnum[] | ServiceScalarFieldEnum
    having?: ServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCountAggregateInputType | true
    _avg?: ServiceAvgAggregateInputType
    _sum?: ServiceSumAggregateInputType
    _min?: ServiceMinAggregateInputType
    _max?: ServiceMaxAggregateInputType
  }

  export type ServiceGroupByOutputType = {
    id: number
    external_id: string | null
    user_id: number
    order_id: number
    credential_id: number | null
    type: $Enums.Type
    game: $Enums.Game
    plataform: $Enums.Plataform
    product_id: string
    status: $Enums.Status
    created_at: Date
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  type GetServiceGroupByPayload<T extends ServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceGroupByOutputType[P]>
        }
      >
    >


  export type ServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    external_id?: boolean
    user_id?: boolean
    order_id?: boolean
    credential_id?: boolean
    type?: boolean
    game?: boolean
    plataform?: boolean
    product_id?: boolean
    status?: boolean
    created_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    credential?: boolean | Service$credentialArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectScalar = {
    id?: boolean
    external_id?: boolean
    user_id?: boolean
    order_id?: boolean
    credential_id?: boolean
    type?: boolean
    game?: boolean
    plataform?: boolean
    product_id?: boolean
    status?: boolean
    created_at?: boolean
  }

  export type ServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    credential?: boolean | Service$credentialArgs<ExtArgs>
  }


  export type $ServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Service"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      order: Prisma.$OrderPayload<ExtArgs>
      credential: Prisma.$CredentialPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      external_id: string | null
      user_id: number
      order_id: number
      credential_id: number | null
      type: $Enums.Type
      game: $Enums.Game
      plataform: $Enums.Plataform
      product_id: string
      status: $Enums.Status
      created_at: Date
    }, ExtArgs["result"]["service"]>
    composites: {}
  }


  type ServiceGetPayload<S extends boolean | null | undefined | ServiceDefaultArgs> = $Result.GetResult<Prisma.$ServicePayload, S>

  type ServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ServiceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ServiceCountAggregateInputType | true
    }

  export interface ServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Service'], meta: { name: 'Service' } }
    /**
     * Find zero or one Service that matches the filter.
     * @param {ServiceFindUniqueArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServiceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceFindUniqueArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Service that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ServiceFindUniqueOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServiceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Service that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServiceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFindFirstArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Service that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServiceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.service.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.service.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceWithIdOnly = await prisma.service.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ServiceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Service.
     * @param {ServiceCreateArgs} args - Arguments to create a Service.
     * @example
     * // Create one Service
     * const Service = await prisma.service.create({
     *   data: {
     *     // ... data to create a Service
     *   }
     * })
     * 
    **/
    create<T extends ServiceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceCreateArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Services.
     *     @param {ServiceCreateManyArgs} args - Arguments to create many Services.
     *     @example
     *     // Create many Services
     *     const service = await prisma.service.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServiceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Service.
     * @param {ServiceDeleteArgs} args - Arguments to delete one Service.
     * @example
     * // Delete one Service
     * const Service = await prisma.service.delete({
     *   where: {
     *     // ... filter to delete one Service
     *   }
     * })
     * 
    **/
    delete<T extends ServiceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceDeleteArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Service.
     * @param {ServiceUpdateArgs} args - Arguments to update one Service.
     * @example
     * // Update one Service
     * const service = await prisma.service.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServiceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceUpdateArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Services.
     * @param {ServiceDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.service.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServiceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServiceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Service.
     * @param {ServiceUpsertArgs} args - Arguments to update or create a Service.
     * @example
     * // Update or create a Service
     * const service = await prisma.service.upsert({
     *   create: {
     *     // ... data to create a Service
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service we want to update
     *   }
     * })
    **/
    upsert<T extends ServiceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceUpsertArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.service.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends ServiceCountArgs>(
      args?: Subset<T, ServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceAggregateArgs>(args: Subset<T, ServiceAggregateArgs>): Prisma.PrismaPromise<GetServiceAggregateType<T>>

    /**
     * Group by Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceGroupByArgs['orderBy'] }
        : { orderBy?: ServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Service model
   */
  readonly fields: ServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Service.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    credential<T extends Service$credentialArgs<ExtArgs> = {}>(args?: Subset<T, Service$credentialArgs<ExtArgs>>): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Service model
   */ 
  interface ServiceFieldRefs {
    readonly id: FieldRef<"Service", 'Int'>
    readonly external_id: FieldRef<"Service", 'String'>
    readonly user_id: FieldRef<"Service", 'Int'>
    readonly order_id: FieldRef<"Service", 'Int'>
    readonly credential_id: FieldRef<"Service", 'Int'>
    readonly type: FieldRef<"Service", 'Type'>
    readonly game: FieldRef<"Service", 'Game'>
    readonly plataform: FieldRef<"Service", 'Plataform'>
    readonly product_id: FieldRef<"Service", 'String'>
    readonly status: FieldRef<"Service", 'Status'>
    readonly created_at: FieldRef<"Service", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Service findUnique
   */
  export type ServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }


  /**
   * Service findUniqueOrThrow
   */
  export type ServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }


  /**
   * Service findFirst
   */
  export type ServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }


  /**
   * Service findFirstOrThrow
   */
  export type ServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }


  /**
   * Service findMany
   */
  export type ServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }


  /**
   * Service create
   */
  export type ServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Service.
     */
    data: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
  }


  /**
   * Service createMany
   */
  export type ServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Service update
   */
  export type ServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Service.
     */
    data: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
    /**
     * Choose, which Service to update.
     */
    where: ServiceWhereUniqueInput
  }


  /**
   * Service updateMany
   */
  export type ServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
  }


  /**
   * Service upsert
   */
  export type ServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Service to update in case it exists.
     */
    where: ServiceWhereUniqueInput
    /**
     * In case the Service found by the `where` argument doesn't exist, create a new Service with this data.
     */
    create: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
    /**
     * In case the Service was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
  }


  /**
   * Service delete
   */
  export type ServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter which Service to delete.
     */
    where: ServiceWhereUniqueInput
  }


  /**
   * Service deleteMany
   */
  export type ServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Services to delete
     */
    where?: ServiceWhereInput
  }


  /**
   * Service.credential
   */
  export type Service$credentialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CredentialInclude<ExtArgs> | null
    where?: CredentialWhereInput
  }


  /**
   * Service without action
   */
  export type ServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
  }



  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    total_products: number | null
    amount_total: number | null
    created_at: number | null
    expires_at: number | null
  }

  export type OrderSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    total_products: number | null
    amount_total: number | null
    created_at: number | null
    expires_at: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: number | null
    external_id: string | null
    session_id: string | null
    user_id: number | null
    total_products: number | null
    amount_total: number | null
    currency: string | null
    session_status: $Enums.SessionStatus | null
    payment_status: $Enums.PaymentStatus | null
    status: $Enums.OrderStatus | null
    created_at: number | null
    expires_at: number | null
    session_url: string | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number | null
    external_id: string | null
    session_id: string | null
    user_id: number | null
    total_products: number | null
    amount_total: number | null
    currency: string | null
    session_status: $Enums.SessionStatus | null
    payment_status: $Enums.PaymentStatus | null
    status: $Enums.OrderStatus | null
    created_at: number | null
    expires_at: number | null
    session_url: string | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    external_id: number
    session_id: number
    user_id: number
    total_products: number
    amount_total: number
    currency: number
    session_status: number
    payment_status: number
    status: number
    created_at: number
    expires_at: number
    session_url: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    user_id?: true
    total_products?: true
    amount_total?: true
    created_at?: true
    expires_at?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    user_id?: true
    total_products?: true
    amount_total?: true
    created_at?: true
    expires_at?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    external_id?: true
    session_id?: true
    user_id?: true
    total_products?: true
    amount_total?: true
    currency?: true
    session_status?: true
    payment_status?: true
    status?: true
    created_at?: true
    expires_at?: true
    session_url?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    external_id?: true
    session_id?: true
    user_id?: true
    total_products?: true
    amount_total?: true
    currency?: true
    session_status?: true
    payment_status?: true
    status?: true
    created_at?: true
    expires_at?: true
    session_url?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    external_id?: true
    session_id?: true
    user_id?: true
    total_products?: true
    amount_total?: true
    currency?: true
    session_status?: true
    payment_status?: true
    status?: true
    created_at?: true
    expires_at?: true
    session_url?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: number
    external_id: string | null
    session_id: string
    user_id: number
    total_products: number
    amount_total: number
    currency: string
    session_status: $Enums.SessionStatus
    payment_status: $Enums.PaymentStatus
    status: $Enums.OrderStatus | null
    created_at: number
    expires_at: number
    session_url: string | null
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    external_id?: boolean
    session_id?: boolean
    user_id?: boolean
    total_products?: boolean
    amount_total?: boolean
    currency?: boolean
    session_status?: boolean
    payment_status?: boolean
    status?: boolean
    created_at?: boolean
    expires_at?: boolean
    session_url?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    services?: boolean | Order$servicesArgs<ExtArgs>
    review?: boolean | Order$reviewArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    external_id?: boolean
    session_id?: boolean
    user_id?: boolean
    total_products?: boolean
    amount_total?: boolean
    currency?: boolean
    session_status?: boolean
    payment_status?: boolean
    status?: boolean
    created_at?: boolean
    expires_at?: boolean
    session_url?: boolean
  }

  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    services?: boolean | Order$servicesArgs<ExtArgs>
    review?: boolean | Order$reviewArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      services: Prisma.$ServicePayload<ExtArgs>[]
      review: Prisma.$ReviewPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      external_id: string | null
      session_id: string
      user_id: number
      total_products: number
      amount_total: number
      currency: string
      session_status: $Enums.SessionStatus
      payment_status: $Enums.PaymentStatus
      status: $Enums.OrderStatus | null
      created_at: number
      expires_at: number
      session_url: string | null
    }, ExtArgs["result"]["order"]>
    composites: {}
  }


  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrderFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Order that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrderFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
    **/
    create<T extends OrderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OrderCreateArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Orders.
     *     @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const order = await prisma.order.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
    **/
    delete<T extends OrderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
    **/
    upsert<T extends OrderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    services<T extends Order$servicesArgs<ExtArgs> = {}>(args?: Subset<T, Order$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findMany'> | Null>;

    review<T extends Order$reviewArgs<ExtArgs> = {}>(args?: Subset<T, Order$reviewArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Order model
   */ 
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'Int'>
    readonly external_id: FieldRef<"Order", 'String'>
    readonly session_id: FieldRef<"Order", 'String'>
    readonly user_id: FieldRef<"Order", 'Int'>
    readonly total_products: FieldRef<"Order", 'Int'>
    readonly amount_total: FieldRef<"Order", 'Int'>
    readonly currency: FieldRef<"Order", 'String'>
    readonly session_status: FieldRef<"Order", 'SessionStatus'>
    readonly payment_status: FieldRef<"Order", 'PaymentStatus'>
    readonly status: FieldRef<"Order", 'OrderStatus'>
    readonly created_at: FieldRef<"Order", 'Int'>
    readonly expires_at: FieldRef<"Order", 'Int'>
    readonly session_url: FieldRef<"Order", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }


  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
  }


  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }


  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
  }


  /**
   * Order.services
   */
  export type Order$servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    cursor?: ServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }


  /**
   * Order.review
   */
  export type Order$reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
  }


  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
  }



  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    order_id: number | null
  }

  export type ReviewSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    order_id: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: number | null
    external_id: string | null
    user_id: number | null
    order_id: number | null
    created_at: Date | null
    review: string | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: number | null
    external_id: string | null
    user_id: number | null
    order_id: number | null
    created_at: Date | null
    review: string | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    external_id: number
    user_id: number
    order_id: number
    created_at: number
    review: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    id?: true
    user_id?: true
    order_id?: true
  }

  export type ReviewSumAggregateInputType = {
    id?: true
    user_id?: true
    order_id?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    external_id?: true
    user_id?: true
    order_id?: true
    created_at?: true
    review?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    external_id?: true
    user_id?: true
    order_id?: true
    created_at?: true
    review?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    external_id?: true
    user_id?: true
    order_id?: true
    created_at?: true
    review?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: number
    external_id: string | null
    user_id: number
    order_id: number
    created_at: Date
    review: string
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    external_id?: boolean
    user_id?: boolean
    order_id?: boolean
    created_at?: boolean
    review?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    id?: boolean
    external_id?: boolean
    user_id?: boolean
    order_id?: boolean
    created_at?: boolean
    review?: boolean
  }

  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }


  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      order: Prisma.$OrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      external_id: string | null
      user_id: number
      order_id: number
      created_at: Date
      review: string
    }, ExtArgs["result"]["review"]>
    composites: {}
  }


  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReviewFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Review that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReviewFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReviewFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
    **/
    create<T extends ReviewCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reviews.
     *     @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     *     @example
     *     // Create many Reviews
     *     const review = await prisma.review.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReviewCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
    **/
    delete<T extends ReviewDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReviewUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReviewDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReviewUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
    **/
    upsert<T extends ReviewUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Review model
   */ 
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'Int'>
    readonly external_id: FieldRef<"Review", 'String'>
    readonly user_id: FieldRef<"Review", 'Int'>
    readonly order_id: FieldRef<"Review", 'Int'>
    readonly created_at: FieldRef<"Review", 'DateTime'>
    readonly review: FieldRef<"Review", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }


  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
  }


  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }


  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
  }


  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    external_id: 'external_id',
    fullname: 'fullname',
    email: 'email',
    password: 'password',
    created_at: 'created_at',
    locale: 'locale',
    email_confirmed: 'email_confirmed'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AdminAccessScalarFieldEnum: {
    id: 'id',
    external_id: 'external_id',
    fullname: 'fullname',
    email: 'email',
    password: 'password',
    created_at: 'created_at'
  };

  export type AdminAccessScalarFieldEnum = (typeof AdminAccessScalarFieldEnum)[keyof typeof AdminAccessScalarFieldEnum]


  export const CredentialScalarFieldEnum: {
    id: 'id',
    external_id: 'external_id',
    user_id: 'user_id',
    game: 'game',
    plataform: 'plataform',
    store: 'store',
    email: 'email',
    password: 'password',
    nickname: 'nickname',
    observations: 'observations',
    created_at: 'created_at',
    active: 'active'
  };

  export type CredentialScalarFieldEnum = (typeof CredentialScalarFieldEnum)[keyof typeof CredentialScalarFieldEnum]


  export const ProductTranslateScalarFieldEnum: {
    id: 'id',
    stripe_product: 'stripe_product',
    name: 'name',
    subtitle: 'subtitle',
    description: 'description',
    game: 'game',
    plataform: 'plataform',
    type: 'type'
  };

  export type ProductTranslateScalarFieldEnum = (typeof ProductTranslateScalarFieldEnum)[keyof typeof ProductTranslateScalarFieldEnum]


  export const ProductCredentialsScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    email: 'email',
    password: 'password',
    nickname: 'nickname',
    plataform: 'plataform',
    store: 'store',
    created_at: 'created_at',
    delivered: 'delivered'
  };

  export type ProductCredentialsScalarFieldEnum = (typeof ProductCredentialsScalarFieldEnum)[keyof typeof ProductCredentialsScalarFieldEnum]


  export const ServiceScalarFieldEnum: {
    id: 'id',
    external_id: 'external_id',
    user_id: 'user_id',
    order_id: 'order_id',
    credential_id: 'credential_id',
    type: 'type',
    game: 'game',
    plataform: 'plataform',
    product_id: 'product_id',
    status: 'status',
    created_at: 'created_at'
  };

  export type ServiceScalarFieldEnum = (typeof ServiceScalarFieldEnum)[keyof typeof ServiceScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    external_id: 'external_id',
    session_id: 'session_id',
    user_id: 'user_id',
    total_products: 'total_products',
    amount_total: 'amount_total',
    currency: 'currency',
    session_status: 'session_status',
    payment_status: 'payment_status',
    status: 'status',
    created_at: 'created_at',
    expires_at: 'expires_at',
    session_url: 'session_url'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    external_id: 'external_id',
    user_id: 'user_id',
    order_id: 'order_id',
    created_at: 'created_at',
    review: 'review'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Locales'
   */
  export type EnumLocalesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Locales'>
    


  /**
   * Reference to a field of type 'Locales[]'
   */
  export type ListEnumLocalesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Locales[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Game'
   */
  export type EnumGameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Game'>
    


  /**
   * Reference to a field of type 'Game[]'
   */
  export type ListEnumGameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Game[]'>
    


  /**
   * Reference to a field of type 'Plataform'
   */
  export type EnumPlataformFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Plataform'>
    


  /**
   * Reference to a field of type 'Plataform[]'
   */
  export type ListEnumPlataformFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Plataform[]'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'Bytes[]'
   */
  export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    


  /**
   * Reference to a field of type 'Type'
   */
  export type EnumTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Type'>
    


  /**
   * Reference to a field of type 'Type[]'
   */
  export type ListEnumTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Type[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'SessionStatus'
   */
  export type EnumSessionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SessionStatus'>
    


  /**
   * Reference to a field of type 'SessionStatus[]'
   */
  export type ListEnumSessionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SessionStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus[]'
   */
  export type ListEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    external_id?: StringNullableFilter<"User"> | string | null
    fullname?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeFilter<"User"> | Date | string
    locale?: EnumLocalesNullableFilter<"User"> | $Enums.Locales | null
    email_confirmed?: BoolFilter<"User"> | boolean
    orders?: OrderListRelationFilter
    credentials?: CredentialListRelationFilter
    services?: ServiceListRelationFilter
    reviews?: ReviewListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    external_id?: SortOrderInput | SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    created_at?: SortOrder
    locale?: SortOrderInput | SortOrder
    email_confirmed?: SortOrder
    orders?: OrderOrderByRelationAggregateInput
    credentials?: CredentialOrderByRelationAggregateInput
    services?: ServiceOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    external_id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    fullname?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeFilter<"User"> | Date | string
    locale?: EnumLocalesNullableFilter<"User"> | $Enums.Locales | null
    email_confirmed?: BoolFilter<"User"> | boolean
    orders?: OrderListRelationFilter
    credentials?: CredentialListRelationFilter
    services?: ServiceListRelationFilter
    reviews?: ReviewListRelationFilter
  }, "id" | "external_id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    external_id?: SortOrderInput | SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    created_at?: SortOrder
    locale?: SortOrderInput | SortOrder
    email_confirmed?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    external_id?: StringNullableWithAggregatesFilter<"User"> | string | null
    fullname?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    locale?: EnumLocalesNullableWithAggregatesFilter<"User"> | $Enums.Locales | null
    email_confirmed?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type AdminAccessWhereInput = {
    AND?: AdminAccessWhereInput | AdminAccessWhereInput[]
    OR?: AdminAccessWhereInput[]
    NOT?: AdminAccessWhereInput | AdminAccessWhereInput[]
    id?: IntFilter<"AdminAccess"> | number
    external_id?: StringNullableFilter<"AdminAccess"> | string | null
    fullname?: StringFilter<"AdminAccess"> | string
    email?: StringFilter<"AdminAccess"> | string
    password?: StringFilter<"AdminAccess"> | string
    created_at?: DateTimeFilter<"AdminAccess"> | Date | string
  }

  export type AdminAccessOrderByWithRelationInput = {
    id?: SortOrder
    external_id?: SortOrderInput | SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type AdminAccessWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    external_id?: string
    email?: string
    AND?: AdminAccessWhereInput | AdminAccessWhereInput[]
    OR?: AdminAccessWhereInput[]
    NOT?: AdminAccessWhereInput | AdminAccessWhereInput[]
    fullname?: StringFilter<"AdminAccess"> | string
    password?: StringFilter<"AdminAccess"> | string
    created_at?: DateTimeFilter<"AdminAccess"> | Date | string
  }, "id" | "external_id" | "email">

  export type AdminAccessOrderByWithAggregationInput = {
    id?: SortOrder
    external_id?: SortOrderInput | SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    _count?: AdminAccessCountOrderByAggregateInput
    _avg?: AdminAccessAvgOrderByAggregateInput
    _max?: AdminAccessMaxOrderByAggregateInput
    _min?: AdminAccessMinOrderByAggregateInput
    _sum?: AdminAccessSumOrderByAggregateInput
  }

  export type AdminAccessScalarWhereWithAggregatesInput = {
    AND?: AdminAccessScalarWhereWithAggregatesInput | AdminAccessScalarWhereWithAggregatesInput[]
    OR?: AdminAccessScalarWhereWithAggregatesInput[]
    NOT?: AdminAccessScalarWhereWithAggregatesInput | AdminAccessScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AdminAccess"> | number
    external_id?: StringNullableWithAggregatesFilter<"AdminAccess"> | string | null
    fullname?: StringWithAggregatesFilter<"AdminAccess"> | string
    email?: StringWithAggregatesFilter<"AdminAccess"> | string
    password?: StringWithAggregatesFilter<"AdminAccess"> | string
    created_at?: DateTimeWithAggregatesFilter<"AdminAccess"> | Date | string
  }

  export type CredentialWhereInput = {
    AND?: CredentialWhereInput | CredentialWhereInput[]
    OR?: CredentialWhereInput[]
    NOT?: CredentialWhereInput | CredentialWhereInput[]
    id?: IntFilter<"Credential"> | number
    external_id?: StringNullableFilter<"Credential"> | string | null
    user_id?: IntFilter<"Credential"> | number
    game?: EnumGameFilter<"Credential"> | $Enums.Game
    plataform?: EnumPlataformFilter<"Credential"> | $Enums.Plataform
    store?: StringNullableFilter<"Credential"> | string | null
    email?: StringFilter<"Credential"> | string
    password?: BytesFilter<"Credential"> | Buffer
    nickname?: StringFilter<"Credential"> | string
    observations?: StringNullableFilter<"Credential"> | string | null
    created_at?: DateTimeFilter<"Credential"> | Date | string
    active?: BoolFilter<"Credential"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    services?: ServiceListRelationFilter
  }

  export type CredentialOrderByWithRelationInput = {
    id?: SortOrder
    external_id?: SortOrderInput | SortOrder
    user_id?: SortOrder
    game?: SortOrder
    plataform?: SortOrder
    store?: SortOrderInput | SortOrder
    email?: SortOrder
    password?: SortOrder
    nickname?: SortOrder
    observations?: SortOrderInput | SortOrder
    created_at?: SortOrder
    active?: SortOrder
    user?: UserOrderByWithRelationInput
    services?: ServiceOrderByRelationAggregateInput
  }

  export type CredentialWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    external_id?: string
    AND?: CredentialWhereInput | CredentialWhereInput[]
    OR?: CredentialWhereInput[]
    NOT?: CredentialWhereInput | CredentialWhereInput[]
    user_id?: IntFilter<"Credential"> | number
    game?: EnumGameFilter<"Credential"> | $Enums.Game
    plataform?: EnumPlataformFilter<"Credential"> | $Enums.Plataform
    store?: StringNullableFilter<"Credential"> | string | null
    email?: StringFilter<"Credential"> | string
    password?: BytesFilter<"Credential"> | Buffer
    nickname?: StringFilter<"Credential"> | string
    observations?: StringNullableFilter<"Credential"> | string | null
    created_at?: DateTimeFilter<"Credential"> | Date | string
    active?: BoolFilter<"Credential"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    services?: ServiceListRelationFilter
  }, "id" | "external_id">

  export type CredentialOrderByWithAggregationInput = {
    id?: SortOrder
    external_id?: SortOrderInput | SortOrder
    user_id?: SortOrder
    game?: SortOrder
    plataform?: SortOrder
    store?: SortOrderInput | SortOrder
    email?: SortOrder
    password?: SortOrder
    nickname?: SortOrder
    observations?: SortOrderInput | SortOrder
    created_at?: SortOrder
    active?: SortOrder
    _count?: CredentialCountOrderByAggregateInput
    _avg?: CredentialAvgOrderByAggregateInput
    _max?: CredentialMaxOrderByAggregateInput
    _min?: CredentialMinOrderByAggregateInput
    _sum?: CredentialSumOrderByAggregateInput
  }

  export type CredentialScalarWhereWithAggregatesInput = {
    AND?: CredentialScalarWhereWithAggregatesInput | CredentialScalarWhereWithAggregatesInput[]
    OR?: CredentialScalarWhereWithAggregatesInput[]
    NOT?: CredentialScalarWhereWithAggregatesInput | CredentialScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Credential"> | number
    external_id?: StringNullableWithAggregatesFilter<"Credential"> | string | null
    user_id?: IntWithAggregatesFilter<"Credential"> | number
    game?: EnumGameWithAggregatesFilter<"Credential"> | $Enums.Game
    plataform?: EnumPlataformWithAggregatesFilter<"Credential"> | $Enums.Plataform
    store?: StringNullableWithAggregatesFilter<"Credential"> | string | null
    email?: StringWithAggregatesFilter<"Credential"> | string
    password?: BytesWithAggregatesFilter<"Credential"> | Buffer
    nickname?: StringWithAggregatesFilter<"Credential"> | string
    observations?: StringNullableWithAggregatesFilter<"Credential"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Credential"> | Date | string
    active?: BoolWithAggregatesFilter<"Credential"> | boolean
  }

  export type ProductTranslateWhereInput = {
    AND?: ProductTranslateWhereInput | ProductTranslateWhereInput[]
    OR?: ProductTranslateWhereInput[]
    NOT?: ProductTranslateWhereInput | ProductTranslateWhereInput[]
    id?: IntFilter<"ProductTranslate"> | number
    stripe_product?: StringFilter<"ProductTranslate"> | string
    name?: StringFilter<"ProductTranslate"> | string
    subtitle?: StringFilter<"ProductTranslate"> | string
    description?: StringFilter<"ProductTranslate"> | string
    game?: EnumGameFilter<"ProductTranslate"> | $Enums.Game
    plataform?: EnumPlataformFilter<"ProductTranslate"> | $Enums.Plataform
    type?: EnumTypeFilter<"ProductTranslate"> | $Enums.Type
  }

  export type ProductTranslateOrderByWithRelationInput = {
    id?: SortOrder
    stripe_product?: SortOrder
    name?: SortOrder
    subtitle?: SortOrder
    description?: SortOrder
    game?: SortOrder
    plataform?: SortOrder
    type?: SortOrder
  }

  export type ProductTranslateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    stripe_product?: string
    AND?: ProductTranslateWhereInput | ProductTranslateWhereInput[]
    OR?: ProductTranslateWhereInput[]
    NOT?: ProductTranslateWhereInput | ProductTranslateWhereInput[]
    name?: StringFilter<"ProductTranslate"> | string
    subtitle?: StringFilter<"ProductTranslate"> | string
    description?: StringFilter<"ProductTranslate"> | string
    game?: EnumGameFilter<"ProductTranslate"> | $Enums.Game
    plataform?: EnumPlataformFilter<"ProductTranslate"> | $Enums.Plataform
    type?: EnumTypeFilter<"ProductTranslate"> | $Enums.Type
  }, "id" | "stripe_product">

  export type ProductTranslateOrderByWithAggregationInput = {
    id?: SortOrder
    stripe_product?: SortOrder
    name?: SortOrder
    subtitle?: SortOrder
    description?: SortOrder
    game?: SortOrder
    plataform?: SortOrder
    type?: SortOrder
    _count?: ProductTranslateCountOrderByAggregateInput
    _avg?: ProductTranslateAvgOrderByAggregateInput
    _max?: ProductTranslateMaxOrderByAggregateInput
    _min?: ProductTranslateMinOrderByAggregateInput
    _sum?: ProductTranslateSumOrderByAggregateInput
  }

  export type ProductTranslateScalarWhereWithAggregatesInput = {
    AND?: ProductTranslateScalarWhereWithAggregatesInput | ProductTranslateScalarWhereWithAggregatesInput[]
    OR?: ProductTranslateScalarWhereWithAggregatesInput[]
    NOT?: ProductTranslateScalarWhereWithAggregatesInput | ProductTranslateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProductTranslate"> | number
    stripe_product?: StringWithAggregatesFilter<"ProductTranslate"> | string
    name?: StringWithAggregatesFilter<"ProductTranslate"> | string
    subtitle?: StringWithAggregatesFilter<"ProductTranslate"> | string
    description?: StringWithAggregatesFilter<"ProductTranslate"> | string
    game?: EnumGameWithAggregatesFilter<"ProductTranslate"> | $Enums.Game
    plataform?: EnumPlataformWithAggregatesFilter<"ProductTranslate"> | $Enums.Plataform
    type?: EnumTypeWithAggregatesFilter<"ProductTranslate"> | $Enums.Type
  }

  export type ProductCredentialsWhereInput = {
    AND?: ProductCredentialsWhereInput | ProductCredentialsWhereInput[]
    OR?: ProductCredentialsWhereInput[]
    NOT?: ProductCredentialsWhereInput | ProductCredentialsWhereInput[]
    id?: IntFilter<"ProductCredentials"> | number
    product_id?: StringFilter<"ProductCredentials"> | string
    email?: StringFilter<"ProductCredentials"> | string
    password?: BytesFilter<"ProductCredentials"> | Buffer
    nickname?: StringFilter<"ProductCredentials"> | string
    plataform?: EnumPlataformFilter<"ProductCredentials"> | $Enums.Plataform
    store?: StringNullableFilter<"ProductCredentials"> | string | null
    created_at?: DateTimeFilter<"ProductCredentials"> | Date | string
    delivered?: BoolFilter<"ProductCredentials"> | boolean
  }

  export type ProductCredentialsOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nickname?: SortOrder
    plataform?: SortOrder
    store?: SortOrderInput | SortOrder
    created_at?: SortOrder
    delivered?: SortOrder
  }

  export type ProductCredentialsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductCredentialsWhereInput | ProductCredentialsWhereInput[]
    OR?: ProductCredentialsWhereInput[]
    NOT?: ProductCredentialsWhereInput | ProductCredentialsWhereInput[]
    product_id?: StringFilter<"ProductCredentials"> | string
    email?: StringFilter<"ProductCredentials"> | string
    password?: BytesFilter<"ProductCredentials"> | Buffer
    nickname?: StringFilter<"ProductCredentials"> | string
    plataform?: EnumPlataformFilter<"ProductCredentials"> | $Enums.Plataform
    store?: StringNullableFilter<"ProductCredentials"> | string | null
    created_at?: DateTimeFilter<"ProductCredentials"> | Date | string
    delivered?: BoolFilter<"ProductCredentials"> | boolean
  }, "id">

  export type ProductCredentialsOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nickname?: SortOrder
    plataform?: SortOrder
    store?: SortOrderInput | SortOrder
    created_at?: SortOrder
    delivered?: SortOrder
    _count?: ProductCredentialsCountOrderByAggregateInput
    _avg?: ProductCredentialsAvgOrderByAggregateInput
    _max?: ProductCredentialsMaxOrderByAggregateInput
    _min?: ProductCredentialsMinOrderByAggregateInput
    _sum?: ProductCredentialsSumOrderByAggregateInput
  }

  export type ProductCredentialsScalarWhereWithAggregatesInput = {
    AND?: ProductCredentialsScalarWhereWithAggregatesInput | ProductCredentialsScalarWhereWithAggregatesInput[]
    OR?: ProductCredentialsScalarWhereWithAggregatesInput[]
    NOT?: ProductCredentialsScalarWhereWithAggregatesInput | ProductCredentialsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProductCredentials"> | number
    product_id?: StringWithAggregatesFilter<"ProductCredentials"> | string
    email?: StringWithAggregatesFilter<"ProductCredentials"> | string
    password?: BytesWithAggregatesFilter<"ProductCredentials"> | Buffer
    nickname?: StringWithAggregatesFilter<"ProductCredentials"> | string
    plataform?: EnumPlataformWithAggregatesFilter<"ProductCredentials"> | $Enums.Plataform
    store?: StringNullableWithAggregatesFilter<"ProductCredentials"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"ProductCredentials"> | Date | string
    delivered?: BoolWithAggregatesFilter<"ProductCredentials"> | boolean
  }

  export type ServiceWhereInput = {
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    id?: IntFilter<"Service"> | number
    external_id?: StringNullableFilter<"Service"> | string | null
    user_id?: IntFilter<"Service"> | number
    order_id?: IntFilter<"Service"> | number
    credential_id?: IntNullableFilter<"Service"> | number | null
    type?: EnumTypeFilter<"Service"> | $Enums.Type
    game?: EnumGameFilter<"Service"> | $Enums.Game
    plataform?: EnumPlataformFilter<"Service"> | $Enums.Plataform
    product_id?: StringFilter<"Service"> | string
    status?: EnumStatusFilter<"Service"> | $Enums.Status
    created_at?: DateTimeFilter<"Service"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    credential?: XOR<CredentialNullableRelationFilter, CredentialWhereInput> | null
  }

  export type ServiceOrderByWithRelationInput = {
    id?: SortOrder
    external_id?: SortOrderInput | SortOrder
    user_id?: SortOrder
    order_id?: SortOrder
    credential_id?: SortOrderInput | SortOrder
    type?: SortOrder
    game?: SortOrder
    plataform?: SortOrder
    product_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    user?: UserOrderByWithRelationInput
    order?: OrderOrderByWithRelationInput
    credential?: CredentialOrderByWithRelationInput
  }

  export type ServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    external_id?: string
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    user_id?: IntFilter<"Service"> | number
    order_id?: IntFilter<"Service"> | number
    credential_id?: IntNullableFilter<"Service"> | number | null
    type?: EnumTypeFilter<"Service"> | $Enums.Type
    game?: EnumGameFilter<"Service"> | $Enums.Game
    plataform?: EnumPlataformFilter<"Service"> | $Enums.Plataform
    product_id?: StringFilter<"Service"> | string
    status?: EnumStatusFilter<"Service"> | $Enums.Status
    created_at?: DateTimeFilter<"Service"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    credential?: XOR<CredentialNullableRelationFilter, CredentialWhereInput> | null
  }, "id" | "external_id">

  export type ServiceOrderByWithAggregationInput = {
    id?: SortOrder
    external_id?: SortOrderInput | SortOrder
    user_id?: SortOrder
    order_id?: SortOrder
    credential_id?: SortOrderInput | SortOrder
    type?: SortOrder
    game?: SortOrder
    plataform?: SortOrder
    product_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    _count?: ServiceCountOrderByAggregateInput
    _avg?: ServiceAvgOrderByAggregateInput
    _max?: ServiceMaxOrderByAggregateInput
    _min?: ServiceMinOrderByAggregateInput
    _sum?: ServiceSumOrderByAggregateInput
  }

  export type ServiceScalarWhereWithAggregatesInput = {
    AND?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    OR?: ServiceScalarWhereWithAggregatesInput[]
    NOT?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Service"> | number
    external_id?: StringNullableWithAggregatesFilter<"Service"> | string | null
    user_id?: IntWithAggregatesFilter<"Service"> | number
    order_id?: IntWithAggregatesFilter<"Service"> | number
    credential_id?: IntNullableWithAggregatesFilter<"Service"> | number | null
    type?: EnumTypeWithAggregatesFilter<"Service"> | $Enums.Type
    game?: EnumGameWithAggregatesFilter<"Service"> | $Enums.Game
    plataform?: EnumPlataformWithAggregatesFilter<"Service"> | $Enums.Plataform
    product_id?: StringWithAggregatesFilter<"Service"> | string
    status?: EnumStatusWithAggregatesFilter<"Service"> | $Enums.Status
    created_at?: DateTimeWithAggregatesFilter<"Service"> | Date | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: IntFilter<"Order"> | number
    external_id?: StringNullableFilter<"Order"> | string | null
    session_id?: StringFilter<"Order"> | string
    user_id?: IntFilter<"Order"> | number
    total_products?: IntFilter<"Order"> | number
    amount_total?: IntFilter<"Order"> | number
    currency?: StringFilter<"Order"> | string
    session_status?: EnumSessionStatusFilter<"Order"> | $Enums.SessionStatus
    payment_status?: EnumPaymentStatusFilter<"Order"> | $Enums.PaymentStatus
    status?: EnumOrderStatusNullableFilter<"Order"> | $Enums.OrderStatus | null
    created_at?: IntFilter<"Order"> | number
    expires_at?: IntFilter<"Order"> | number
    session_url?: StringNullableFilter<"Order"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    services?: ServiceListRelationFilter
    review?: XOR<ReviewNullableRelationFilter, ReviewWhereInput> | null
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    external_id?: SortOrderInput | SortOrder
    session_id?: SortOrder
    user_id?: SortOrder
    total_products?: SortOrder
    amount_total?: SortOrder
    currency?: SortOrder
    session_status?: SortOrder
    payment_status?: SortOrder
    status?: SortOrderInput | SortOrder
    created_at?: SortOrder
    expires_at?: SortOrder
    session_url?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    services?: ServiceOrderByRelationAggregateInput
    review?: ReviewOrderByWithRelationInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    external_id?: string
    session_id?: string
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    user_id?: IntFilter<"Order"> | number
    total_products?: IntFilter<"Order"> | number
    amount_total?: IntFilter<"Order"> | number
    currency?: StringFilter<"Order"> | string
    session_status?: EnumSessionStatusFilter<"Order"> | $Enums.SessionStatus
    payment_status?: EnumPaymentStatusFilter<"Order"> | $Enums.PaymentStatus
    status?: EnumOrderStatusNullableFilter<"Order"> | $Enums.OrderStatus | null
    created_at?: IntFilter<"Order"> | number
    expires_at?: IntFilter<"Order"> | number
    session_url?: StringNullableFilter<"Order"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    services?: ServiceListRelationFilter
    review?: XOR<ReviewNullableRelationFilter, ReviewWhereInput> | null
  }, "id" | "external_id" | "session_id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    external_id?: SortOrderInput | SortOrder
    session_id?: SortOrder
    user_id?: SortOrder
    total_products?: SortOrder
    amount_total?: SortOrder
    currency?: SortOrder
    session_status?: SortOrder
    payment_status?: SortOrder
    status?: SortOrderInput | SortOrder
    created_at?: SortOrder
    expires_at?: SortOrder
    session_url?: SortOrderInput | SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Order"> | number
    external_id?: StringNullableWithAggregatesFilter<"Order"> | string | null
    session_id?: StringWithAggregatesFilter<"Order"> | string
    user_id?: IntWithAggregatesFilter<"Order"> | number
    total_products?: IntWithAggregatesFilter<"Order"> | number
    amount_total?: IntWithAggregatesFilter<"Order"> | number
    currency?: StringWithAggregatesFilter<"Order"> | string
    session_status?: EnumSessionStatusWithAggregatesFilter<"Order"> | $Enums.SessionStatus
    payment_status?: EnumPaymentStatusWithAggregatesFilter<"Order"> | $Enums.PaymentStatus
    status?: EnumOrderStatusNullableWithAggregatesFilter<"Order"> | $Enums.OrderStatus | null
    created_at?: IntWithAggregatesFilter<"Order"> | number
    expires_at?: IntWithAggregatesFilter<"Order"> | number
    session_url?: StringNullableWithAggregatesFilter<"Order"> | string | null
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: IntFilter<"Review"> | number
    external_id?: StringNullableFilter<"Review"> | string | null
    user_id?: IntFilter<"Review"> | number
    order_id?: IntFilter<"Review"> | number
    created_at?: DateTimeFilter<"Review"> | Date | string
    review?: StringFilter<"Review"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    order?: XOR<OrderRelationFilter, OrderWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    external_id?: SortOrderInput | SortOrder
    user_id?: SortOrder
    order_id?: SortOrder
    created_at?: SortOrder
    review?: SortOrder
    user?: UserOrderByWithRelationInput
    order?: OrderOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    external_id?: string
    order_id?: number
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    user_id?: IntFilter<"Review"> | number
    created_at?: DateTimeFilter<"Review"> | Date | string
    review?: StringFilter<"Review"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    order?: XOR<OrderRelationFilter, OrderWhereInput>
  }, "id" | "external_id" | "order_id">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    external_id?: SortOrderInput | SortOrder
    user_id?: SortOrder
    order_id?: SortOrder
    created_at?: SortOrder
    review?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Review"> | number
    external_id?: StringNullableWithAggregatesFilter<"Review"> | string | null
    user_id?: IntWithAggregatesFilter<"Review"> | number
    order_id?: IntWithAggregatesFilter<"Review"> | number
    created_at?: DateTimeWithAggregatesFilter<"Review"> | Date | string
    review?: StringWithAggregatesFilter<"Review"> | string
  }

  export type UserCreateInput = {
    external_id?: string | null
    fullname: string
    email: string
    password?: string | null
    created_at?: Date | string
    locale?: $Enums.Locales | null
    email_confirmed?: boolean
    orders?: OrderCreateNestedManyWithoutUserInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    services?: ServiceCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    external_id?: string | null
    fullname: string
    email: string
    password?: string | null
    created_at?: Date | string
    locale?: $Enums.Locales | null
    email_confirmed?: boolean
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    services?: ServiceUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    locale?: NullableEnumLocalesFieldUpdateOperationsInput | $Enums.Locales | null
    email_confirmed?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUpdateManyWithoutUserNestedInput
    credentials?: CredentialUpdateManyWithoutUserNestedInput
    services?: ServiceUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    locale?: NullableEnumLocalesFieldUpdateOperationsInput | $Enums.Locales | null
    email_confirmed?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserNestedInput
    services?: ServiceUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    external_id?: string | null
    fullname: string
    email: string
    password?: string | null
    created_at?: Date | string
    locale?: $Enums.Locales | null
    email_confirmed?: boolean
  }

  export type UserUpdateManyMutationInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    locale?: NullableEnumLocalesFieldUpdateOperationsInput | $Enums.Locales | null
    email_confirmed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    locale?: NullableEnumLocalesFieldUpdateOperationsInput | $Enums.Locales | null
    email_confirmed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AdminAccessCreateInput = {
    external_id?: string | null
    fullname: string
    email: string
    password: string
    created_at?: Date | string
  }

  export type AdminAccessUncheckedCreateInput = {
    id?: number
    external_id?: string | null
    fullname: string
    email: string
    password: string
    created_at?: Date | string
  }

  export type AdminAccessUpdateInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminAccessUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminAccessCreateManyInput = {
    id?: number
    external_id?: string | null
    fullname: string
    email: string
    password: string
    created_at?: Date | string
  }

  export type AdminAccessUpdateManyMutationInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminAccessUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CredentialCreateInput = {
    external_id?: string | null
    game: $Enums.Game
    plataform: $Enums.Plataform
    store?: string | null
    email: string
    password: Buffer
    nickname: string
    observations?: string | null
    created_at?: Date | string
    active?: boolean
    user: UserCreateNestedOneWithoutCredentialsInput
    services?: ServiceCreateNestedManyWithoutCredentialInput
  }

  export type CredentialUncheckedCreateInput = {
    id?: number
    external_id?: string | null
    user_id: number
    game: $Enums.Game
    plataform: $Enums.Plataform
    store?: string | null
    email: string
    password: Buffer
    nickname: string
    observations?: string | null
    created_at?: Date | string
    active?: boolean
    services?: ServiceUncheckedCreateNestedManyWithoutCredentialInput
  }

  export type CredentialUpdateInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    store?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: BytesFieldUpdateOperationsInput | Buffer
    nickname?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutCredentialsNestedInput
    services?: ServiceUpdateManyWithoutCredentialNestedInput
  }

  export type CredentialUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    store?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: BytesFieldUpdateOperationsInput | Buffer
    nickname?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    services?: ServiceUncheckedUpdateManyWithoutCredentialNestedInput
  }

  export type CredentialCreateManyInput = {
    id?: number
    external_id?: string | null
    user_id: number
    game: $Enums.Game
    plataform: $Enums.Plataform
    store?: string | null
    email: string
    password: Buffer
    nickname: string
    observations?: string | null
    created_at?: Date | string
    active?: boolean
  }

  export type CredentialUpdateManyMutationInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    store?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: BytesFieldUpdateOperationsInput | Buffer
    nickname?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CredentialUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    store?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: BytesFieldUpdateOperationsInput | Buffer
    nickname?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductTranslateCreateInput = {
    stripe_product: string
    name: string
    subtitle: string
    description: string
    game: $Enums.Game
    plataform: $Enums.Plataform
    type: $Enums.Type
  }

  export type ProductTranslateUncheckedCreateInput = {
    id?: number
    stripe_product: string
    name: string
    subtitle: string
    description: string
    game: $Enums.Game
    plataform: $Enums.Plataform
    type: $Enums.Type
  }

  export type ProductTranslateUpdateInput = {
    stripe_product?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subtitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
  }

  export type ProductTranslateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    stripe_product?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subtitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
  }

  export type ProductTranslateCreateManyInput = {
    id?: number
    stripe_product: string
    name: string
    subtitle: string
    description: string
    game: $Enums.Game
    plataform: $Enums.Plataform
    type: $Enums.Type
  }

  export type ProductTranslateUpdateManyMutationInput = {
    stripe_product?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subtitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
  }

  export type ProductTranslateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    stripe_product?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subtitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
  }

  export type ProductCredentialsCreateInput = {
    product_id: string
    email: string
    password: Buffer
    nickname: string
    plataform: $Enums.Plataform
    store?: string | null
    created_at?: Date | string
    delivered?: boolean
  }

  export type ProductCredentialsUncheckedCreateInput = {
    id?: number
    product_id: string
    email: string
    password: Buffer
    nickname: string
    plataform: $Enums.Plataform
    store?: string | null
    created_at?: Date | string
    delivered?: boolean
  }

  export type ProductCredentialsUpdateInput = {
    product_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: BytesFieldUpdateOperationsInput | Buffer
    nickname?: StringFieldUpdateOperationsInput | string
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    store?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    delivered?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductCredentialsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: BytesFieldUpdateOperationsInput | Buffer
    nickname?: StringFieldUpdateOperationsInput | string
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    store?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    delivered?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductCredentialsCreateManyInput = {
    id?: number
    product_id: string
    email: string
    password: Buffer
    nickname: string
    plataform: $Enums.Plataform
    store?: string | null
    created_at?: Date | string
    delivered?: boolean
  }

  export type ProductCredentialsUpdateManyMutationInput = {
    product_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: BytesFieldUpdateOperationsInput | Buffer
    nickname?: StringFieldUpdateOperationsInput | string
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    store?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    delivered?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductCredentialsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: BytesFieldUpdateOperationsInput | Buffer
    nickname?: StringFieldUpdateOperationsInput | string
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    store?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    delivered?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ServiceCreateInput = {
    external_id?: string | null
    type: $Enums.Type
    game: $Enums.Game
    plataform: $Enums.Plataform
    product_id: string
    status?: $Enums.Status
    created_at?: Date | string
    user: UserCreateNestedOneWithoutServicesInput
    order: OrderCreateNestedOneWithoutServicesInput
    credential?: CredentialCreateNestedOneWithoutServicesInput
  }

  export type ServiceUncheckedCreateInput = {
    id?: number
    external_id?: string | null
    user_id: number
    order_id: number
    credential_id?: number | null
    type: $Enums.Type
    game: $Enums.Game
    plataform: $Enums.Plataform
    product_id: string
    status?: $Enums.Status
    created_at?: Date | string
  }

  export type ServiceUpdateInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    product_id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutServicesNestedInput
    order?: OrderUpdateOneRequiredWithoutServicesNestedInput
    credential?: CredentialUpdateOneWithoutServicesNestedInput
  }

  export type ServiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    credential_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    product_id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCreateManyInput = {
    id?: number
    external_id?: string | null
    user_id: number
    order_id: number
    credential_id?: number | null
    type: $Enums.Type
    game: $Enums.Game
    plataform: $Enums.Plataform
    product_id: string
    status?: $Enums.Status
    created_at?: Date | string
  }

  export type ServiceUpdateManyMutationInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    product_id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    credential_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    product_id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateInput = {
    external_id?: string | null
    session_id: string
    total_products: number
    amount_total: number
    currency: string
    session_status?: $Enums.SessionStatus
    payment_status?: $Enums.PaymentStatus
    status?: $Enums.OrderStatus | null
    created_at: number
    expires_at: number
    session_url?: string | null
    user: UserCreateNestedOneWithoutOrdersInput
    services?: ServiceCreateNestedManyWithoutOrderInput
    review?: ReviewCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: number
    external_id?: string | null
    session_id: string
    user_id: number
    total_products: number
    amount_total: number
    currency: string
    session_status?: $Enums.SessionStatus
    payment_status?: $Enums.PaymentStatus
    status?: $Enums.OrderStatus | null
    created_at: number
    expires_at: number
    session_url?: string | null
    services?: ServiceUncheckedCreateNestedManyWithoutOrderInput
    review?: ReviewUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderUpdateInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    session_id?: StringFieldUpdateOperationsInput | string
    total_products?: IntFieldUpdateOperationsInput | number
    amount_total?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    session_status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    status?: NullableEnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus | null
    created_at?: IntFieldUpdateOperationsInput | number
    expires_at?: IntFieldUpdateOperationsInput | number
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    services?: ServiceUpdateManyWithoutOrderNestedInput
    review?: ReviewUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    session_id?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    total_products?: IntFieldUpdateOperationsInput | number
    amount_total?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    session_status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    status?: NullableEnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus | null
    created_at?: IntFieldUpdateOperationsInput | number
    expires_at?: IntFieldUpdateOperationsInput | number
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    services?: ServiceUncheckedUpdateManyWithoutOrderNestedInput
    review?: ReviewUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: number
    external_id?: string | null
    session_id: string
    user_id: number
    total_products: number
    amount_total: number
    currency: string
    session_status?: $Enums.SessionStatus
    payment_status?: $Enums.PaymentStatus
    status?: $Enums.OrderStatus | null
    created_at: number
    expires_at: number
    session_url?: string | null
  }

  export type OrderUpdateManyMutationInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    session_id?: StringFieldUpdateOperationsInput | string
    total_products?: IntFieldUpdateOperationsInput | number
    amount_total?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    session_status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    status?: NullableEnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus | null
    created_at?: IntFieldUpdateOperationsInput | number
    expires_at?: IntFieldUpdateOperationsInput | number
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    session_id?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    total_products?: IntFieldUpdateOperationsInput | number
    amount_total?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    session_status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    status?: NullableEnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus | null
    created_at?: IntFieldUpdateOperationsInput | number
    expires_at?: IntFieldUpdateOperationsInput | number
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewCreateInput = {
    external_id?: string | null
    created_at?: Date | string
    review: string
    user: UserCreateNestedOneWithoutReviewsInput
    order: OrderCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: number
    external_id?: string | null
    user_id: number
    order_id: number
    created_at?: Date | string
    review: string
  }

  export type ReviewUpdateInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
    order?: OrderUpdateOneRequiredWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewCreateManyInput = {
    id?: number
    external_id?: string | null
    user_id: number
    order_id: number
    created_at?: Date | string
    review: string
  }

  export type ReviewUpdateManyMutationInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumLocalesNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Locales | EnumLocalesFieldRefInput<$PrismaModel> | null
    in?: $Enums.Locales[] | ListEnumLocalesFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Locales[] | ListEnumLocalesFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLocalesNullableFilter<$PrismaModel> | $Enums.Locales | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type CredentialListRelationFilter = {
    every?: CredentialWhereInput
    some?: CredentialWhereInput
    none?: CredentialWhereInput
  }

  export type ServiceListRelationFilter = {
    every?: ServiceWhereInput
    some?: ServiceWhereInput
    none?: ServiceWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CredentialOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    locale?: SortOrder
    email_confirmed?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    locale?: SortOrder
    email_confirmed?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    locale?: SortOrder
    email_confirmed?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumLocalesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Locales | EnumLocalesFieldRefInput<$PrismaModel> | null
    in?: $Enums.Locales[] | ListEnumLocalesFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Locales[] | ListEnumLocalesFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLocalesNullableWithAggregatesFilter<$PrismaModel> | $Enums.Locales | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLocalesNullableFilter<$PrismaModel>
    _max?: NestedEnumLocalesNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type AdminAccessCountOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type AdminAccessAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AdminAccessMaxOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type AdminAccessMinOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type AdminAccessSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumGameFilter<$PrismaModel = never> = {
    equals?: $Enums.Game | EnumGameFieldRefInput<$PrismaModel>
    in?: $Enums.Game[] | ListEnumGameFieldRefInput<$PrismaModel>
    notIn?: $Enums.Game[] | ListEnumGameFieldRefInput<$PrismaModel>
    not?: NestedEnumGameFilter<$PrismaModel> | $Enums.Game
  }

  export type EnumPlataformFilter<$PrismaModel = never> = {
    equals?: $Enums.Plataform | EnumPlataformFieldRefInput<$PrismaModel>
    in?: $Enums.Plataform[] | ListEnumPlataformFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plataform[] | ListEnumPlataformFieldRefInput<$PrismaModel>
    not?: NestedEnumPlataformFilter<$PrismaModel> | $Enums.Plataform
  }

  export type BytesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesFilter<$PrismaModel> | Buffer
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CredentialCountOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    user_id?: SortOrder
    game?: SortOrder
    plataform?: SortOrder
    store?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nickname?: SortOrder
    observations?: SortOrder
    created_at?: SortOrder
    active?: SortOrder
  }

  export type CredentialAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type CredentialMaxOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    user_id?: SortOrder
    game?: SortOrder
    plataform?: SortOrder
    store?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nickname?: SortOrder
    observations?: SortOrder
    created_at?: SortOrder
    active?: SortOrder
  }

  export type CredentialMinOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    user_id?: SortOrder
    game?: SortOrder
    plataform?: SortOrder
    store?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nickname?: SortOrder
    observations?: SortOrder
    created_at?: SortOrder
    active?: SortOrder
  }

  export type CredentialSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type EnumGameWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Game | EnumGameFieldRefInput<$PrismaModel>
    in?: $Enums.Game[] | ListEnumGameFieldRefInput<$PrismaModel>
    notIn?: $Enums.Game[] | ListEnumGameFieldRefInput<$PrismaModel>
    not?: NestedEnumGameWithAggregatesFilter<$PrismaModel> | $Enums.Game
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameFilter<$PrismaModel>
    _max?: NestedEnumGameFilter<$PrismaModel>
  }

  export type EnumPlataformWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Plataform | EnumPlataformFieldRefInput<$PrismaModel>
    in?: $Enums.Plataform[] | ListEnumPlataformFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plataform[] | ListEnumPlataformFieldRefInput<$PrismaModel>
    not?: NestedEnumPlataformWithAggregatesFilter<$PrismaModel> | $Enums.Plataform
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlataformFilter<$PrismaModel>
    _max?: NestedEnumPlataformFilter<$PrismaModel>
  }

  export type BytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Buffer
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type EnumTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeFilter<$PrismaModel> | $Enums.Type
  }

  export type ProductTranslateCountOrderByAggregateInput = {
    id?: SortOrder
    stripe_product?: SortOrder
    name?: SortOrder
    subtitle?: SortOrder
    description?: SortOrder
    game?: SortOrder
    plataform?: SortOrder
    type?: SortOrder
  }

  export type ProductTranslateAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProductTranslateMaxOrderByAggregateInput = {
    id?: SortOrder
    stripe_product?: SortOrder
    name?: SortOrder
    subtitle?: SortOrder
    description?: SortOrder
    game?: SortOrder
    plataform?: SortOrder
    type?: SortOrder
  }

  export type ProductTranslateMinOrderByAggregateInput = {
    id?: SortOrder
    stripe_product?: SortOrder
    name?: SortOrder
    subtitle?: SortOrder
    description?: SortOrder
    game?: SortOrder
    plataform?: SortOrder
    type?: SortOrder
  }

  export type ProductTranslateSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeWithAggregatesFilter<$PrismaModel> | $Enums.Type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeFilter<$PrismaModel>
    _max?: NestedEnumTypeFilter<$PrismaModel>
  }

  export type ProductCredentialsCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nickname?: SortOrder
    plataform?: SortOrder
    store?: SortOrder
    created_at?: SortOrder
    delivered?: SortOrder
  }

  export type ProductCredentialsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProductCredentialsMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nickname?: SortOrder
    plataform?: SortOrder
    store?: SortOrder
    created_at?: SortOrder
    delivered?: SortOrder
  }

  export type ProductCredentialsMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nickname?: SortOrder
    plataform?: SortOrder
    store?: SortOrder
    created_at?: SortOrder
    delivered?: SortOrder
  }

  export type ProductCredentialsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type OrderRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type CredentialNullableRelationFilter = {
    is?: CredentialWhereInput | null
    isNot?: CredentialWhereInput | null
  }

  export type ServiceCountOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    user_id?: SortOrder
    order_id?: SortOrder
    credential_id?: SortOrder
    type?: SortOrder
    game?: SortOrder
    plataform?: SortOrder
    product_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
  }

  export type ServiceAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    order_id?: SortOrder
    credential_id?: SortOrder
  }

  export type ServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    user_id?: SortOrder
    order_id?: SortOrder
    credential_id?: SortOrder
    type?: SortOrder
    game?: SortOrder
    plataform?: SortOrder
    product_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
  }

  export type ServiceMinOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    user_id?: SortOrder
    order_id?: SortOrder
    credential_id?: SortOrder
    type?: SortOrder
    game?: SortOrder
    plataform?: SortOrder
    product_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
  }

  export type ServiceSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    order_id?: SortOrder
    credential_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type EnumSessionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusFilter<$PrismaModel> | $Enums.SessionStatus
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type EnumOrderStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOrderStatusNullableFilter<$PrismaModel> | $Enums.OrderStatus | null
  }

  export type ReviewNullableRelationFilter = {
    is?: ReviewWhereInput | null
    isNot?: ReviewWhereInput | null
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    session_id?: SortOrder
    user_id?: SortOrder
    total_products?: SortOrder
    amount_total?: SortOrder
    currency?: SortOrder
    session_status?: SortOrder
    payment_status?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    expires_at?: SortOrder
    session_url?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_products?: SortOrder
    amount_total?: SortOrder
    created_at?: SortOrder
    expires_at?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    session_id?: SortOrder
    user_id?: SortOrder
    total_products?: SortOrder
    amount_total?: SortOrder
    currency?: SortOrder
    session_status?: SortOrder
    payment_status?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    expires_at?: SortOrder
    session_url?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    session_id?: SortOrder
    user_id?: SortOrder
    total_products?: SortOrder
    amount_total?: SortOrder
    currency?: SortOrder
    session_status?: SortOrder
    payment_status?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    expires_at?: SortOrder
    session_url?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_products?: SortOrder
    amount_total?: SortOrder
    created_at?: SortOrder
    expires_at?: SortOrder
  }

  export type EnumSessionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SessionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSessionStatusFilter<$PrismaModel>
    _max?: NestedEnumSessionStatusFilter<$PrismaModel>
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type EnumOrderStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOrderStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusNullableFilter<$PrismaModel>
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    user_id?: SortOrder
    order_id?: SortOrder
    created_at?: SortOrder
    review?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    order_id?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    user_id?: SortOrder
    order_id?: SortOrder
    created_at?: SortOrder
    review?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    external_id?: SortOrder
    user_id?: SortOrder
    order_id?: SortOrder
    created_at?: SortOrder
    review?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    order_id?: SortOrder
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type CredentialCreateNestedManyWithoutUserInput = {
    create?: XOR<CredentialCreateWithoutUserInput, CredentialUncheckedCreateWithoutUserInput> | CredentialCreateWithoutUserInput[] | CredentialUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CredentialCreateOrConnectWithoutUserInput | CredentialCreateOrConnectWithoutUserInput[]
    createMany?: CredentialCreateManyUserInputEnvelope
    connect?: CredentialWhereUniqueInput | CredentialWhereUniqueInput[]
  }

  export type ServiceCreateNestedManyWithoutUserInput = {
    create?: XOR<ServiceCreateWithoutUserInput, ServiceUncheckedCreateWithoutUserInput> | ServiceCreateWithoutUserInput[] | ServiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutUserInput | ServiceCreateOrConnectWithoutUserInput[]
    createMany?: ServiceCreateManyUserInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type CredentialUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CredentialCreateWithoutUserInput, CredentialUncheckedCreateWithoutUserInput> | CredentialCreateWithoutUserInput[] | CredentialUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CredentialCreateOrConnectWithoutUserInput | CredentialCreateOrConnectWithoutUserInput[]
    createMany?: CredentialCreateManyUserInputEnvelope
    connect?: CredentialWhereUniqueInput | CredentialWhereUniqueInput[]
  }

  export type ServiceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ServiceCreateWithoutUserInput, ServiceUncheckedCreateWithoutUserInput> | ServiceCreateWithoutUserInput[] | ServiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutUserInput | ServiceCreateOrConnectWithoutUserInput[]
    createMany?: ServiceCreateManyUserInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableEnumLocalesFieldUpdateOperationsInput = {
    set?: $Enums.Locales | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type OrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type CredentialUpdateManyWithoutUserNestedInput = {
    create?: XOR<CredentialCreateWithoutUserInput, CredentialUncheckedCreateWithoutUserInput> | CredentialCreateWithoutUserInput[] | CredentialUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CredentialCreateOrConnectWithoutUserInput | CredentialCreateOrConnectWithoutUserInput[]
    upsert?: CredentialUpsertWithWhereUniqueWithoutUserInput | CredentialUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CredentialCreateManyUserInputEnvelope
    set?: CredentialWhereUniqueInput | CredentialWhereUniqueInput[]
    disconnect?: CredentialWhereUniqueInput | CredentialWhereUniqueInput[]
    delete?: CredentialWhereUniqueInput | CredentialWhereUniqueInput[]
    connect?: CredentialWhereUniqueInput | CredentialWhereUniqueInput[]
    update?: CredentialUpdateWithWhereUniqueWithoutUserInput | CredentialUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CredentialUpdateManyWithWhereWithoutUserInput | CredentialUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CredentialScalarWhereInput | CredentialScalarWhereInput[]
  }

  export type ServiceUpdateManyWithoutUserNestedInput = {
    create?: XOR<ServiceCreateWithoutUserInput, ServiceUncheckedCreateWithoutUserInput> | ServiceCreateWithoutUserInput[] | ServiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutUserInput | ServiceCreateOrConnectWithoutUserInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutUserInput | ServiceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ServiceCreateManyUserInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutUserInput | ServiceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutUserInput | ServiceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type CredentialUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CredentialCreateWithoutUserInput, CredentialUncheckedCreateWithoutUserInput> | CredentialCreateWithoutUserInput[] | CredentialUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CredentialCreateOrConnectWithoutUserInput | CredentialCreateOrConnectWithoutUserInput[]
    upsert?: CredentialUpsertWithWhereUniqueWithoutUserInput | CredentialUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CredentialCreateManyUserInputEnvelope
    set?: CredentialWhereUniqueInput | CredentialWhereUniqueInput[]
    disconnect?: CredentialWhereUniqueInput | CredentialWhereUniqueInput[]
    delete?: CredentialWhereUniqueInput | CredentialWhereUniqueInput[]
    connect?: CredentialWhereUniqueInput | CredentialWhereUniqueInput[]
    update?: CredentialUpdateWithWhereUniqueWithoutUserInput | CredentialUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CredentialUpdateManyWithWhereWithoutUserInput | CredentialUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CredentialScalarWhereInput | CredentialScalarWhereInput[]
  }

  export type ServiceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ServiceCreateWithoutUserInput, ServiceUncheckedCreateWithoutUserInput> | ServiceCreateWithoutUserInput[] | ServiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutUserInput | ServiceCreateOrConnectWithoutUserInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutUserInput | ServiceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ServiceCreateManyUserInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutUserInput | ServiceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutUserInput | ServiceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCredentialsInput = {
    create?: XOR<UserCreateWithoutCredentialsInput, UserUncheckedCreateWithoutCredentialsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCredentialsInput
    connect?: UserWhereUniqueInput
  }

  export type ServiceCreateNestedManyWithoutCredentialInput = {
    create?: XOR<ServiceCreateWithoutCredentialInput, ServiceUncheckedCreateWithoutCredentialInput> | ServiceCreateWithoutCredentialInput[] | ServiceUncheckedCreateWithoutCredentialInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutCredentialInput | ServiceCreateOrConnectWithoutCredentialInput[]
    createMany?: ServiceCreateManyCredentialInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type ServiceUncheckedCreateNestedManyWithoutCredentialInput = {
    create?: XOR<ServiceCreateWithoutCredentialInput, ServiceUncheckedCreateWithoutCredentialInput> | ServiceCreateWithoutCredentialInput[] | ServiceUncheckedCreateWithoutCredentialInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutCredentialInput | ServiceCreateOrConnectWithoutCredentialInput[]
    createMany?: ServiceCreateManyCredentialInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type EnumGameFieldUpdateOperationsInput = {
    set?: $Enums.Game
  }

  export type EnumPlataformFieldUpdateOperationsInput = {
    set?: $Enums.Plataform
  }

  export type BytesFieldUpdateOperationsInput = {
    set?: Buffer
  }

  export type UserUpdateOneRequiredWithoutCredentialsNestedInput = {
    create?: XOR<UserCreateWithoutCredentialsInput, UserUncheckedCreateWithoutCredentialsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCredentialsInput
    upsert?: UserUpsertWithoutCredentialsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCredentialsInput, UserUpdateWithoutCredentialsInput>, UserUncheckedUpdateWithoutCredentialsInput>
  }

  export type ServiceUpdateManyWithoutCredentialNestedInput = {
    create?: XOR<ServiceCreateWithoutCredentialInput, ServiceUncheckedCreateWithoutCredentialInput> | ServiceCreateWithoutCredentialInput[] | ServiceUncheckedCreateWithoutCredentialInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutCredentialInput | ServiceCreateOrConnectWithoutCredentialInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutCredentialInput | ServiceUpsertWithWhereUniqueWithoutCredentialInput[]
    createMany?: ServiceCreateManyCredentialInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutCredentialInput | ServiceUpdateWithWhereUniqueWithoutCredentialInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutCredentialInput | ServiceUpdateManyWithWhereWithoutCredentialInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type ServiceUncheckedUpdateManyWithoutCredentialNestedInput = {
    create?: XOR<ServiceCreateWithoutCredentialInput, ServiceUncheckedCreateWithoutCredentialInput> | ServiceCreateWithoutCredentialInput[] | ServiceUncheckedCreateWithoutCredentialInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutCredentialInput | ServiceCreateOrConnectWithoutCredentialInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutCredentialInput | ServiceUpsertWithWhereUniqueWithoutCredentialInput[]
    createMany?: ServiceCreateManyCredentialInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutCredentialInput | ServiceUpdateWithWhereUniqueWithoutCredentialInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutCredentialInput | ServiceUpdateManyWithWhereWithoutCredentialInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type EnumTypeFieldUpdateOperationsInput = {
    set?: $Enums.Type
  }

  export type UserCreateNestedOneWithoutServicesInput = {
    create?: XOR<UserCreateWithoutServicesInput, UserUncheckedCreateWithoutServicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutServicesInput
    connect?: UserWhereUniqueInput
  }

  export type OrderCreateNestedOneWithoutServicesInput = {
    create?: XOR<OrderCreateWithoutServicesInput, OrderUncheckedCreateWithoutServicesInput>
    connectOrCreate?: OrderCreateOrConnectWithoutServicesInput
    connect?: OrderWhereUniqueInput
  }

  export type CredentialCreateNestedOneWithoutServicesInput = {
    create?: XOR<CredentialCreateWithoutServicesInput, CredentialUncheckedCreateWithoutServicesInput>
    connectOrCreate?: CredentialCreateOrConnectWithoutServicesInput
    connect?: CredentialWhereUniqueInput
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type UserUpdateOneRequiredWithoutServicesNestedInput = {
    create?: XOR<UserCreateWithoutServicesInput, UserUncheckedCreateWithoutServicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutServicesInput
    upsert?: UserUpsertWithoutServicesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutServicesInput, UserUpdateWithoutServicesInput>, UserUncheckedUpdateWithoutServicesInput>
  }

  export type OrderUpdateOneRequiredWithoutServicesNestedInput = {
    create?: XOR<OrderCreateWithoutServicesInput, OrderUncheckedCreateWithoutServicesInput>
    connectOrCreate?: OrderCreateOrConnectWithoutServicesInput
    upsert?: OrderUpsertWithoutServicesInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutServicesInput, OrderUpdateWithoutServicesInput>, OrderUncheckedUpdateWithoutServicesInput>
  }

  export type CredentialUpdateOneWithoutServicesNestedInput = {
    create?: XOR<CredentialCreateWithoutServicesInput, CredentialUncheckedCreateWithoutServicesInput>
    connectOrCreate?: CredentialCreateOrConnectWithoutServicesInput
    upsert?: CredentialUpsertWithoutServicesInput
    disconnect?: CredentialWhereInput | boolean
    delete?: CredentialWhereInput | boolean
    connect?: CredentialWhereUniqueInput
    update?: XOR<XOR<CredentialUpdateToOneWithWhereWithoutServicesInput, CredentialUpdateWithoutServicesInput>, CredentialUncheckedUpdateWithoutServicesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type ServiceCreateNestedManyWithoutOrderInput = {
    create?: XOR<ServiceCreateWithoutOrderInput, ServiceUncheckedCreateWithoutOrderInput> | ServiceCreateWithoutOrderInput[] | ServiceUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutOrderInput | ServiceCreateOrConnectWithoutOrderInput[]
    createMany?: ServiceCreateManyOrderInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type ReviewCreateNestedOneWithoutOrderInput = {
    create?: XOR<ReviewCreateWithoutOrderInput, ReviewUncheckedCreateWithoutOrderInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutOrderInput
    connect?: ReviewWhereUniqueInput
  }

  export type ServiceUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<ServiceCreateWithoutOrderInput, ServiceUncheckedCreateWithoutOrderInput> | ServiceCreateWithoutOrderInput[] | ServiceUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutOrderInput | ServiceCreateOrConnectWithoutOrderInput[]
    createMany?: ServiceCreateManyOrderInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedOneWithoutOrderInput = {
    create?: XOR<ReviewCreateWithoutOrderInput, ReviewUncheckedCreateWithoutOrderInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutOrderInput
    connect?: ReviewWhereUniqueInput
  }

  export type EnumSessionStatusFieldUpdateOperationsInput = {
    set?: $Enums.SessionStatus
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type NullableEnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus | null
  }

  export type UserUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrdersInput, UserUpdateWithoutOrdersInput>, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type ServiceUpdateManyWithoutOrderNestedInput = {
    create?: XOR<ServiceCreateWithoutOrderInput, ServiceUncheckedCreateWithoutOrderInput> | ServiceCreateWithoutOrderInput[] | ServiceUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutOrderInput | ServiceCreateOrConnectWithoutOrderInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutOrderInput | ServiceUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: ServiceCreateManyOrderInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutOrderInput | ServiceUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutOrderInput | ServiceUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type ReviewUpdateOneWithoutOrderNestedInput = {
    create?: XOR<ReviewCreateWithoutOrderInput, ReviewUncheckedCreateWithoutOrderInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutOrderInput
    upsert?: ReviewUpsertWithoutOrderInput
    disconnect?: ReviewWhereInput | boolean
    delete?: ReviewWhereInput | boolean
    connect?: ReviewWhereUniqueInput
    update?: XOR<XOR<ReviewUpdateToOneWithWhereWithoutOrderInput, ReviewUpdateWithoutOrderInput>, ReviewUncheckedUpdateWithoutOrderInput>
  }

  export type ServiceUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<ServiceCreateWithoutOrderInput, ServiceUncheckedCreateWithoutOrderInput> | ServiceCreateWithoutOrderInput[] | ServiceUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutOrderInput | ServiceCreateOrConnectWithoutOrderInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutOrderInput | ServiceUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: ServiceCreateManyOrderInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutOrderInput | ServiceUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutOrderInput | ServiceUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateOneWithoutOrderNestedInput = {
    create?: XOR<ReviewCreateWithoutOrderInput, ReviewUncheckedCreateWithoutOrderInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutOrderInput
    upsert?: ReviewUpsertWithoutOrderInput
    disconnect?: ReviewWhereInput | boolean
    delete?: ReviewWhereInput | boolean
    connect?: ReviewWhereUniqueInput
    update?: XOR<XOR<ReviewUpdateToOneWithWhereWithoutOrderInput, ReviewUpdateWithoutOrderInput>, ReviewUncheckedUpdateWithoutOrderInput>
  }

  export type UserCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type OrderCreateNestedOneWithoutReviewInput = {
    create?: XOR<OrderCreateWithoutReviewInput, OrderUncheckedCreateWithoutReviewInput>
    connectOrCreate?: OrderCreateOrConnectWithoutReviewInput
    connect?: OrderWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    upsert?: UserUpsertWithoutReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewsInput, UserUpdateWithoutReviewsInput>, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type OrderUpdateOneRequiredWithoutReviewNestedInput = {
    create?: XOR<OrderCreateWithoutReviewInput, OrderUncheckedCreateWithoutReviewInput>
    connectOrCreate?: OrderCreateOrConnectWithoutReviewInput
    upsert?: OrderUpsertWithoutReviewInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutReviewInput, OrderUpdateWithoutReviewInput>, OrderUncheckedUpdateWithoutReviewInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumLocalesNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Locales | EnumLocalesFieldRefInput<$PrismaModel> | null
    in?: $Enums.Locales[] | ListEnumLocalesFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Locales[] | ListEnumLocalesFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLocalesNullableFilter<$PrismaModel> | $Enums.Locales | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumLocalesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Locales | EnumLocalesFieldRefInput<$PrismaModel> | null
    in?: $Enums.Locales[] | ListEnumLocalesFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Locales[] | ListEnumLocalesFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLocalesNullableWithAggregatesFilter<$PrismaModel> | $Enums.Locales | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLocalesNullableFilter<$PrismaModel>
    _max?: NestedEnumLocalesNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumGameFilter<$PrismaModel = never> = {
    equals?: $Enums.Game | EnumGameFieldRefInput<$PrismaModel>
    in?: $Enums.Game[] | ListEnumGameFieldRefInput<$PrismaModel>
    notIn?: $Enums.Game[] | ListEnumGameFieldRefInput<$PrismaModel>
    not?: NestedEnumGameFilter<$PrismaModel> | $Enums.Game
  }

  export type NestedEnumPlataformFilter<$PrismaModel = never> = {
    equals?: $Enums.Plataform | EnumPlataformFieldRefInput<$PrismaModel>
    in?: $Enums.Plataform[] | ListEnumPlataformFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plataform[] | ListEnumPlataformFieldRefInput<$PrismaModel>
    not?: NestedEnumPlataformFilter<$PrismaModel> | $Enums.Plataform
  }

  export type NestedBytesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesFilter<$PrismaModel> | Buffer
  }

  export type NestedEnumGameWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Game | EnumGameFieldRefInput<$PrismaModel>
    in?: $Enums.Game[] | ListEnumGameFieldRefInput<$PrismaModel>
    notIn?: $Enums.Game[] | ListEnumGameFieldRefInput<$PrismaModel>
    not?: NestedEnumGameWithAggregatesFilter<$PrismaModel> | $Enums.Game
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameFilter<$PrismaModel>
    _max?: NestedEnumGameFilter<$PrismaModel>
  }

  export type NestedEnumPlataformWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Plataform | EnumPlataformFieldRefInput<$PrismaModel>
    in?: $Enums.Plataform[] | ListEnumPlataformFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plataform[] | ListEnumPlataformFieldRefInput<$PrismaModel>
    not?: NestedEnumPlataformWithAggregatesFilter<$PrismaModel> | $Enums.Plataform
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlataformFilter<$PrismaModel>
    _max?: NestedEnumPlataformFilter<$PrismaModel>
  }

  export type NestedBytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Buffer
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type NestedEnumTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeFilter<$PrismaModel> | $Enums.Type
  }

  export type NestedEnumTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeWithAggregatesFilter<$PrismaModel> | $Enums.Type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeFilter<$PrismaModel>
    _max?: NestedEnumTypeFilter<$PrismaModel>
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedEnumSessionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusFilter<$PrismaModel> | $Enums.SessionStatus
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumOrderStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOrderStatusNullableFilter<$PrismaModel> | $Enums.OrderStatus | null
  }

  export type NestedEnumSessionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SessionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSessionStatusFilter<$PrismaModel>
    _max?: NestedEnumSessionStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOrderStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusNullableFilter<$PrismaModel>
  }

  export type OrderCreateWithoutUserInput = {
    external_id?: string | null
    session_id: string
    total_products: number
    amount_total: number
    currency: string
    session_status?: $Enums.SessionStatus
    payment_status?: $Enums.PaymentStatus
    status?: $Enums.OrderStatus | null
    created_at: number
    expires_at: number
    session_url?: string | null
    services?: ServiceCreateNestedManyWithoutOrderInput
    review?: ReviewCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: number
    external_id?: string | null
    session_id: string
    total_products: number
    amount_total: number
    currency: string
    session_status?: $Enums.SessionStatus
    payment_status?: $Enums.PaymentStatus
    status?: $Enums.OrderStatus | null
    created_at: number
    expires_at: number
    session_url?: string | null
    services?: ServiceUncheckedCreateNestedManyWithoutOrderInput
    review?: ReviewUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateManyUserInputEnvelope = {
    data: OrderCreateManyUserInput | OrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CredentialCreateWithoutUserInput = {
    external_id?: string | null
    game: $Enums.Game
    plataform: $Enums.Plataform
    store?: string | null
    email: string
    password: Buffer
    nickname: string
    observations?: string | null
    created_at?: Date | string
    active?: boolean
    services?: ServiceCreateNestedManyWithoutCredentialInput
  }

  export type CredentialUncheckedCreateWithoutUserInput = {
    id?: number
    external_id?: string | null
    game: $Enums.Game
    plataform: $Enums.Plataform
    store?: string | null
    email: string
    password: Buffer
    nickname: string
    observations?: string | null
    created_at?: Date | string
    active?: boolean
    services?: ServiceUncheckedCreateNestedManyWithoutCredentialInput
  }

  export type CredentialCreateOrConnectWithoutUserInput = {
    where: CredentialWhereUniqueInput
    create: XOR<CredentialCreateWithoutUserInput, CredentialUncheckedCreateWithoutUserInput>
  }

  export type CredentialCreateManyUserInputEnvelope = {
    data: CredentialCreateManyUserInput | CredentialCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ServiceCreateWithoutUserInput = {
    external_id?: string | null
    type: $Enums.Type
    game: $Enums.Game
    plataform: $Enums.Plataform
    product_id: string
    status?: $Enums.Status
    created_at?: Date | string
    order: OrderCreateNestedOneWithoutServicesInput
    credential?: CredentialCreateNestedOneWithoutServicesInput
  }

  export type ServiceUncheckedCreateWithoutUserInput = {
    id?: number
    external_id?: string | null
    order_id: number
    credential_id?: number | null
    type: $Enums.Type
    game: $Enums.Game
    plataform: $Enums.Plataform
    product_id: string
    status?: $Enums.Status
    created_at?: Date | string
  }

  export type ServiceCreateOrConnectWithoutUserInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutUserInput, ServiceUncheckedCreateWithoutUserInput>
  }

  export type ServiceCreateManyUserInputEnvelope = {
    data: ServiceCreateManyUserInput | ServiceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutUserInput = {
    external_id?: string | null
    created_at?: Date | string
    review: string
    order: OrderCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    id?: number
    external_id?: string | null
    order_id: number
    created_at?: Date | string
    review: string
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateManyUserInputEnvelope = {
    data: ReviewCreateManyUserInput | ReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutUserInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: IntFilter<"Order"> | number
    external_id?: StringNullableFilter<"Order"> | string | null
    session_id?: StringFilter<"Order"> | string
    user_id?: IntFilter<"Order"> | number
    total_products?: IntFilter<"Order"> | number
    amount_total?: IntFilter<"Order"> | number
    currency?: StringFilter<"Order"> | string
    session_status?: EnumSessionStatusFilter<"Order"> | $Enums.SessionStatus
    payment_status?: EnumPaymentStatusFilter<"Order"> | $Enums.PaymentStatus
    status?: EnumOrderStatusNullableFilter<"Order"> | $Enums.OrderStatus | null
    created_at?: IntFilter<"Order"> | number
    expires_at?: IntFilter<"Order"> | number
    session_url?: StringNullableFilter<"Order"> | string | null
  }

  export type CredentialUpsertWithWhereUniqueWithoutUserInput = {
    where: CredentialWhereUniqueInput
    update: XOR<CredentialUpdateWithoutUserInput, CredentialUncheckedUpdateWithoutUserInput>
    create: XOR<CredentialCreateWithoutUserInput, CredentialUncheckedCreateWithoutUserInput>
  }

  export type CredentialUpdateWithWhereUniqueWithoutUserInput = {
    where: CredentialWhereUniqueInput
    data: XOR<CredentialUpdateWithoutUserInput, CredentialUncheckedUpdateWithoutUserInput>
  }

  export type CredentialUpdateManyWithWhereWithoutUserInput = {
    where: CredentialScalarWhereInput
    data: XOR<CredentialUpdateManyMutationInput, CredentialUncheckedUpdateManyWithoutUserInput>
  }

  export type CredentialScalarWhereInput = {
    AND?: CredentialScalarWhereInput | CredentialScalarWhereInput[]
    OR?: CredentialScalarWhereInput[]
    NOT?: CredentialScalarWhereInput | CredentialScalarWhereInput[]
    id?: IntFilter<"Credential"> | number
    external_id?: StringNullableFilter<"Credential"> | string | null
    user_id?: IntFilter<"Credential"> | number
    game?: EnumGameFilter<"Credential"> | $Enums.Game
    plataform?: EnumPlataformFilter<"Credential"> | $Enums.Plataform
    store?: StringNullableFilter<"Credential"> | string | null
    email?: StringFilter<"Credential"> | string
    password?: BytesFilter<"Credential"> | Buffer
    nickname?: StringFilter<"Credential"> | string
    observations?: StringNullableFilter<"Credential"> | string | null
    created_at?: DateTimeFilter<"Credential"> | Date | string
    active?: BoolFilter<"Credential"> | boolean
  }

  export type ServiceUpsertWithWhereUniqueWithoutUserInput = {
    where: ServiceWhereUniqueInput
    update: XOR<ServiceUpdateWithoutUserInput, ServiceUncheckedUpdateWithoutUserInput>
    create: XOR<ServiceCreateWithoutUserInput, ServiceUncheckedCreateWithoutUserInput>
  }

  export type ServiceUpdateWithWhereUniqueWithoutUserInput = {
    where: ServiceWhereUniqueInput
    data: XOR<ServiceUpdateWithoutUserInput, ServiceUncheckedUpdateWithoutUserInput>
  }

  export type ServiceUpdateManyWithWhereWithoutUserInput = {
    where: ServiceScalarWhereInput
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyWithoutUserInput>
  }

  export type ServiceScalarWhereInput = {
    AND?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
    OR?: ServiceScalarWhereInput[]
    NOT?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
    id?: IntFilter<"Service"> | number
    external_id?: StringNullableFilter<"Service"> | string | null
    user_id?: IntFilter<"Service"> | number
    order_id?: IntFilter<"Service"> | number
    credential_id?: IntNullableFilter<"Service"> | number | null
    type?: EnumTypeFilter<"Service"> | $Enums.Type
    game?: EnumGameFilter<"Service"> | $Enums.Game
    plataform?: EnumPlataformFilter<"Service"> | $Enums.Plataform
    product_id?: StringFilter<"Service"> | string
    status?: EnumStatusFilter<"Service"> | $Enums.Status
    created_at?: DateTimeFilter<"Service"> | Date | string
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: IntFilter<"Review"> | number
    external_id?: StringNullableFilter<"Review"> | string | null
    user_id?: IntFilter<"Review"> | number
    order_id?: IntFilter<"Review"> | number
    created_at?: DateTimeFilter<"Review"> | Date | string
    review?: StringFilter<"Review"> | string
  }

  export type UserCreateWithoutCredentialsInput = {
    external_id?: string | null
    fullname: string
    email: string
    password?: string | null
    created_at?: Date | string
    locale?: $Enums.Locales | null
    email_confirmed?: boolean
    orders?: OrderCreateNestedManyWithoutUserInput
    services?: ServiceCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCredentialsInput = {
    id?: number
    external_id?: string | null
    fullname: string
    email: string
    password?: string | null
    created_at?: Date | string
    locale?: $Enums.Locales | null
    email_confirmed?: boolean
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    services?: ServiceUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCredentialsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCredentialsInput, UserUncheckedCreateWithoutCredentialsInput>
  }

  export type ServiceCreateWithoutCredentialInput = {
    external_id?: string | null
    type: $Enums.Type
    game: $Enums.Game
    plataform: $Enums.Plataform
    product_id: string
    status?: $Enums.Status
    created_at?: Date | string
    user: UserCreateNestedOneWithoutServicesInput
    order: OrderCreateNestedOneWithoutServicesInput
  }

  export type ServiceUncheckedCreateWithoutCredentialInput = {
    id?: number
    external_id?: string | null
    user_id: number
    order_id: number
    type: $Enums.Type
    game: $Enums.Game
    plataform: $Enums.Plataform
    product_id: string
    status?: $Enums.Status
    created_at?: Date | string
  }

  export type ServiceCreateOrConnectWithoutCredentialInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutCredentialInput, ServiceUncheckedCreateWithoutCredentialInput>
  }

  export type ServiceCreateManyCredentialInputEnvelope = {
    data: ServiceCreateManyCredentialInput | ServiceCreateManyCredentialInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCredentialsInput = {
    update: XOR<UserUpdateWithoutCredentialsInput, UserUncheckedUpdateWithoutCredentialsInput>
    create: XOR<UserCreateWithoutCredentialsInput, UserUncheckedCreateWithoutCredentialsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCredentialsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCredentialsInput, UserUncheckedUpdateWithoutCredentialsInput>
  }

  export type UserUpdateWithoutCredentialsInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    locale?: NullableEnumLocalesFieldUpdateOperationsInput | $Enums.Locales | null
    email_confirmed?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUpdateManyWithoutUserNestedInput
    services?: ServiceUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCredentialsInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    locale?: NullableEnumLocalesFieldUpdateOperationsInput | $Enums.Locales | null
    email_confirmed?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    services?: ServiceUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ServiceUpsertWithWhereUniqueWithoutCredentialInput = {
    where: ServiceWhereUniqueInput
    update: XOR<ServiceUpdateWithoutCredentialInput, ServiceUncheckedUpdateWithoutCredentialInput>
    create: XOR<ServiceCreateWithoutCredentialInput, ServiceUncheckedCreateWithoutCredentialInput>
  }

  export type ServiceUpdateWithWhereUniqueWithoutCredentialInput = {
    where: ServiceWhereUniqueInput
    data: XOR<ServiceUpdateWithoutCredentialInput, ServiceUncheckedUpdateWithoutCredentialInput>
  }

  export type ServiceUpdateManyWithWhereWithoutCredentialInput = {
    where: ServiceScalarWhereInput
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyWithoutCredentialInput>
  }

  export type UserCreateWithoutServicesInput = {
    external_id?: string | null
    fullname: string
    email: string
    password?: string | null
    created_at?: Date | string
    locale?: $Enums.Locales | null
    email_confirmed?: boolean
    orders?: OrderCreateNestedManyWithoutUserInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutServicesInput = {
    id?: number
    external_id?: string | null
    fullname: string
    email: string
    password?: string | null
    created_at?: Date | string
    locale?: $Enums.Locales | null
    email_confirmed?: boolean
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutServicesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutServicesInput, UserUncheckedCreateWithoutServicesInput>
  }

  export type OrderCreateWithoutServicesInput = {
    external_id?: string | null
    session_id: string
    total_products: number
    amount_total: number
    currency: string
    session_status?: $Enums.SessionStatus
    payment_status?: $Enums.PaymentStatus
    status?: $Enums.OrderStatus | null
    created_at: number
    expires_at: number
    session_url?: string | null
    user: UserCreateNestedOneWithoutOrdersInput
    review?: ReviewCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutServicesInput = {
    id?: number
    external_id?: string | null
    session_id: string
    user_id: number
    total_products: number
    amount_total: number
    currency: string
    session_status?: $Enums.SessionStatus
    payment_status?: $Enums.PaymentStatus
    status?: $Enums.OrderStatus | null
    created_at: number
    expires_at: number
    session_url?: string | null
    review?: ReviewUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutServicesInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutServicesInput, OrderUncheckedCreateWithoutServicesInput>
  }

  export type CredentialCreateWithoutServicesInput = {
    external_id?: string | null
    game: $Enums.Game
    plataform: $Enums.Plataform
    store?: string | null
    email: string
    password: Buffer
    nickname: string
    observations?: string | null
    created_at?: Date | string
    active?: boolean
    user: UserCreateNestedOneWithoutCredentialsInput
  }

  export type CredentialUncheckedCreateWithoutServicesInput = {
    id?: number
    external_id?: string | null
    user_id: number
    game: $Enums.Game
    plataform: $Enums.Plataform
    store?: string | null
    email: string
    password: Buffer
    nickname: string
    observations?: string | null
    created_at?: Date | string
    active?: boolean
  }

  export type CredentialCreateOrConnectWithoutServicesInput = {
    where: CredentialWhereUniqueInput
    create: XOR<CredentialCreateWithoutServicesInput, CredentialUncheckedCreateWithoutServicesInput>
  }

  export type UserUpsertWithoutServicesInput = {
    update: XOR<UserUpdateWithoutServicesInput, UserUncheckedUpdateWithoutServicesInput>
    create: XOR<UserCreateWithoutServicesInput, UserUncheckedCreateWithoutServicesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutServicesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutServicesInput, UserUncheckedUpdateWithoutServicesInput>
  }

  export type UserUpdateWithoutServicesInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    locale?: NullableEnumLocalesFieldUpdateOperationsInput | $Enums.Locales | null
    email_confirmed?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUpdateManyWithoutUserNestedInput
    credentials?: CredentialUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    locale?: NullableEnumLocalesFieldUpdateOperationsInput | $Enums.Locales | null
    email_confirmed?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrderUpsertWithoutServicesInput = {
    update: XOR<OrderUpdateWithoutServicesInput, OrderUncheckedUpdateWithoutServicesInput>
    create: XOR<OrderCreateWithoutServicesInput, OrderUncheckedCreateWithoutServicesInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutServicesInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutServicesInput, OrderUncheckedUpdateWithoutServicesInput>
  }

  export type OrderUpdateWithoutServicesInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    session_id?: StringFieldUpdateOperationsInput | string
    total_products?: IntFieldUpdateOperationsInput | number
    amount_total?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    session_status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    status?: NullableEnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus | null
    created_at?: IntFieldUpdateOperationsInput | number
    expires_at?: IntFieldUpdateOperationsInput | number
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    review?: ReviewUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    session_id?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    total_products?: IntFieldUpdateOperationsInput | number
    amount_total?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    session_status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    status?: NullableEnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus | null
    created_at?: IntFieldUpdateOperationsInput | number
    expires_at?: IntFieldUpdateOperationsInput | number
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    review?: ReviewUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type CredentialUpsertWithoutServicesInput = {
    update: XOR<CredentialUpdateWithoutServicesInput, CredentialUncheckedUpdateWithoutServicesInput>
    create: XOR<CredentialCreateWithoutServicesInput, CredentialUncheckedCreateWithoutServicesInput>
    where?: CredentialWhereInput
  }

  export type CredentialUpdateToOneWithWhereWithoutServicesInput = {
    where?: CredentialWhereInput
    data: XOR<CredentialUpdateWithoutServicesInput, CredentialUncheckedUpdateWithoutServicesInput>
  }

  export type CredentialUpdateWithoutServicesInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    store?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: BytesFieldUpdateOperationsInput | Buffer
    nickname?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutCredentialsNestedInput
  }

  export type CredentialUncheckedUpdateWithoutServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    store?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: BytesFieldUpdateOperationsInput | Buffer
    nickname?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateWithoutOrdersInput = {
    external_id?: string | null
    fullname: string
    email: string
    password?: string | null
    created_at?: Date | string
    locale?: $Enums.Locales | null
    email_confirmed?: boolean
    credentials?: CredentialCreateNestedManyWithoutUserInput
    services?: ServiceCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: number
    external_id?: string | null
    fullname: string
    email: string
    password?: string | null
    created_at?: Date | string
    locale?: $Enums.Locales | null
    email_confirmed?: boolean
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    services?: ServiceUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type ServiceCreateWithoutOrderInput = {
    external_id?: string | null
    type: $Enums.Type
    game: $Enums.Game
    plataform: $Enums.Plataform
    product_id: string
    status?: $Enums.Status
    created_at?: Date | string
    user: UserCreateNestedOneWithoutServicesInput
    credential?: CredentialCreateNestedOneWithoutServicesInput
  }

  export type ServiceUncheckedCreateWithoutOrderInput = {
    id?: number
    external_id?: string | null
    user_id: number
    credential_id?: number | null
    type: $Enums.Type
    game: $Enums.Game
    plataform: $Enums.Plataform
    product_id: string
    status?: $Enums.Status
    created_at?: Date | string
  }

  export type ServiceCreateOrConnectWithoutOrderInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutOrderInput, ServiceUncheckedCreateWithoutOrderInput>
  }

  export type ServiceCreateManyOrderInputEnvelope = {
    data: ServiceCreateManyOrderInput | ServiceCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutOrderInput = {
    external_id?: string | null
    created_at?: Date | string
    review: string
    user: UserCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutOrderInput = {
    id?: number
    external_id?: string | null
    user_id: number
    created_at?: Date | string
    review: string
  }

  export type ReviewCreateOrConnectWithoutOrderInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutOrderInput, ReviewUncheckedCreateWithoutOrderInput>
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    locale?: NullableEnumLocalesFieldUpdateOperationsInput | $Enums.Locales | null
    email_confirmed?: BoolFieldUpdateOperationsInput | boolean
    credentials?: CredentialUpdateManyWithoutUserNestedInput
    services?: ServiceUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    locale?: NullableEnumLocalesFieldUpdateOperationsInput | $Enums.Locales | null
    email_confirmed?: BoolFieldUpdateOperationsInput | boolean
    credentials?: CredentialUncheckedUpdateManyWithoutUserNestedInput
    services?: ServiceUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ServiceUpsertWithWhereUniqueWithoutOrderInput = {
    where: ServiceWhereUniqueInput
    update: XOR<ServiceUpdateWithoutOrderInput, ServiceUncheckedUpdateWithoutOrderInput>
    create: XOR<ServiceCreateWithoutOrderInput, ServiceUncheckedCreateWithoutOrderInput>
  }

  export type ServiceUpdateWithWhereUniqueWithoutOrderInput = {
    where: ServiceWhereUniqueInput
    data: XOR<ServiceUpdateWithoutOrderInput, ServiceUncheckedUpdateWithoutOrderInput>
  }

  export type ServiceUpdateManyWithWhereWithoutOrderInput = {
    where: ServiceScalarWhereInput
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyWithoutOrderInput>
  }

  export type ReviewUpsertWithoutOrderInput = {
    update: XOR<ReviewUpdateWithoutOrderInput, ReviewUncheckedUpdateWithoutOrderInput>
    create: XOR<ReviewCreateWithoutOrderInput, ReviewUncheckedCreateWithoutOrderInput>
    where?: ReviewWhereInput
  }

  export type ReviewUpdateToOneWithWhereWithoutOrderInput = {
    where?: ReviewWhereInput
    data: XOR<ReviewUpdateWithoutOrderInput, ReviewUncheckedUpdateWithoutOrderInput>
  }

  export type ReviewUpdateWithoutOrderInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutReviewsInput = {
    external_id?: string | null
    fullname: string
    email: string
    password?: string | null
    created_at?: Date | string
    locale?: $Enums.Locales | null
    email_confirmed?: boolean
    orders?: OrderCreateNestedManyWithoutUserInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    services?: ServiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewsInput = {
    id?: number
    external_id?: string | null
    fullname: string
    email: string
    password?: string | null
    created_at?: Date | string
    locale?: $Enums.Locales | null
    email_confirmed?: boolean
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    services?: ServiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type OrderCreateWithoutReviewInput = {
    external_id?: string | null
    session_id: string
    total_products: number
    amount_total: number
    currency: string
    session_status?: $Enums.SessionStatus
    payment_status?: $Enums.PaymentStatus
    status?: $Enums.OrderStatus | null
    created_at: number
    expires_at: number
    session_url?: string | null
    user: UserCreateNestedOneWithoutOrdersInput
    services?: ServiceCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutReviewInput = {
    id?: number
    external_id?: string | null
    session_id: string
    user_id: number
    total_products: number
    amount_total: number
    currency: string
    session_status?: $Enums.SessionStatus
    payment_status?: $Enums.PaymentStatus
    status?: $Enums.OrderStatus | null
    created_at: number
    expires_at: number
    session_url?: string | null
    services?: ServiceUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutReviewInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutReviewInput, OrderUncheckedCreateWithoutReviewInput>
  }

  export type UserUpsertWithoutReviewsInput = {
    update: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateWithoutReviewsInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    locale?: NullableEnumLocalesFieldUpdateOperationsInput | $Enums.Locales | null
    email_confirmed?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUpdateManyWithoutUserNestedInput
    credentials?: CredentialUpdateManyWithoutUserNestedInput
    services?: ServiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    locale?: NullableEnumLocalesFieldUpdateOperationsInput | $Enums.Locales | null
    email_confirmed?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserNestedInput
    services?: ServiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrderUpsertWithoutReviewInput = {
    update: XOR<OrderUpdateWithoutReviewInput, OrderUncheckedUpdateWithoutReviewInput>
    create: XOR<OrderCreateWithoutReviewInput, OrderUncheckedCreateWithoutReviewInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutReviewInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutReviewInput, OrderUncheckedUpdateWithoutReviewInput>
  }

  export type OrderUpdateWithoutReviewInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    session_id?: StringFieldUpdateOperationsInput | string
    total_products?: IntFieldUpdateOperationsInput | number
    amount_total?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    session_status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    status?: NullableEnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus | null
    created_at?: IntFieldUpdateOperationsInput | number
    expires_at?: IntFieldUpdateOperationsInput | number
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    services?: ServiceUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    session_id?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    total_products?: IntFieldUpdateOperationsInput | number
    amount_total?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    session_status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    status?: NullableEnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus | null
    created_at?: IntFieldUpdateOperationsInput | number
    expires_at?: IntFieldUpdateOperationsInput | number
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    services?: ServiceUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyUserInput = {
    id?: number
    external_id?: string | null
    session_id: string
    total_products: number
    amount_total: number
    currency: string
    session_status?: $Enums.SessionStatus
    payment_status?: $Enums.PaymentStatus
    status?: $Enums.OrderStatus | null
    created_at: number
    expires_at: number
    session_url?: string | null
  }

  export type CredentialCreateManyUserInput = {
    id?: number
    external_id?: string | null
    game: $Enums.Game
    plataform: $Enums.Plataform
    store?: string | null
    email: string
    password: Buffer
    nickname: string
    observations?: string | null
    created_at?: Date | string
    active?: boolean
  }

  export type ServiceCreateManyUserInput = {
    id?: number
    external_id?: string | null
    order_id: number
    credential_id?: number | null
    type: $Enums.Type
    game: $Enums.Game
    plataform: $Enums.Plataform
    product_id: string
    status?: $Enums.Status
    created_at?: Date | string
  }

  export type ReviewCreateManyUserInput = {
    id?: number
    external_id?: string | null
    order_id: number
    created_at?: Date | string
    review: string
  }

  export type OrderUpdateWithoutUserInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    session_id?: StringFieldUpdateOperationsInput | string
    total_products?: IntFieldUpdateOperationsInput | number
    amount_total?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    session_status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    status?: NullableEnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus | null
    created_at?: IntFieldUpdateOperationsInput | number
    expires_at?: IntFieldUpdateOperationsInput | number
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    services?: ServiceUpdateManyWithoutOrderNestedInput
    review?: ReviewUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    session_id?: StringFieldUpdateOperationsInput | string
    total_products?: IntFieldUpdateOperationsInput | number
    amount_total?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    session_status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    status?: NullableEnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus | null
    created_at?: IntFieldUpdateOperationsInput | number
    expires_at?: IntFieldUpdateOperationsInput | number
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    services?: ServiceUncheckedUpdateManyWithoutOrderNestedInput
    review?: ReviewUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    session_id?: StringFieldUpdateOperationsInput | string
    total_products?: IntFieldUpdateOperationsInput | number
    amount_total?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    session_status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    status?: NullableEnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus | null
    created_at?: IntFieldUpdateOperationsInput | number
    expires_at?: IntFieldUpdateOperationsInput | number
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CredentialUpdateWithoutUserInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    store?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: BytesFieldUpdateOperationsInput | Buffer
    nickname?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    services?: ServiceUpdateManyWithoutCredentialNestedInput
  }

  export type CredentialUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    store?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: BytesFieldUpdateOperationsInput | Buffer
    nickname?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    services?: ServiceUncheckedUpdateManyWithoutCredentialNestedInput
  }

  export type CredentialUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    store?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: BytesFieldUpdateOperationsInput | Buffer
    nickname?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ServiceUpdateWithoutUserInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    product_id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutServicesNestedInput
    credential?: CredentialUpdateOneWithoutServicesNestedInput
  }

  export type ServiceUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    order_id?: IntFieldUpdateOperationsInput | number
    credential_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    product_id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    order_id?: IntFieldUpdateOperationsInput | number
    credential_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    product_id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutUserInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: StringFieldUpdateOperationsInput | string
    order?: OrderUpdateOneRequiredWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    order_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    order_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceCreateManyCredentialInput = {
    id?: number
    external_id?: string | null
    user_id: number
    order_id: number
    type: $Enums.Type
    game: $Enums.Game
    plataform: $Enums.Plataform
    product_id: string
    status?: $Enums.Status
    created_at?: Date | string
  }

  export type ServiceUpdateWithoutCredentialInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    product_id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutServicesNestedInput
    order?: OrderUpdateOneRequiredWithoutServicesNestedInput
  }

  export type ServiceUncheckedUpdateWithoutCredentialInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    product_id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceUncheckedUpdateManyWithoutCredentialInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    product_id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCreateManyOrderInput = {
    id?: number
    external_id?: string | null
    user_id: number
    credential_id?: number | null
    type: $Enums.Type
    game: $Enums.Game
    plataform: $Enums.Plataform
    product_id: string
    status?: $Enums.Status
    created_at?: Date | string
  }

  export type ServiceUpdateWithoutOrderInput = {
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    product_id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutServicesNestedInput
    credential?: CredentialUpdateOneWithoutServicesNestedInput
  }

  export type ServiceUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    credential_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    product_id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    external_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    credential_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    plataform?: EnumPlataformFieldUpdateOperationsInput | $Enums.Plataform
    product_id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CredentialCountOutputTypeDefaultArgs instead
     */
    export type CredentialCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CredentialCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderCountOutputTypeDefaultArgs instead
     */
    export type OrderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminAccessDefaultArgs instead
     */
    export type AdminAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminAccessDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CredentialDefaultArgs instead
     */
    export type CredentialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CredentialDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductTranslateDefaultArgs instead
     */
    export type ProductTranslateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductTranslateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCredentialsDefaultArgs instead
     */
    export type ProductCredentialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductCredentialsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServiceDefaultArgs instead
     */
    export type ServiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServiceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderDefaultArgs instead
     */
    export type OrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReviewDefaultArgs instead
     */
    export type ReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReviewDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}