
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.12.1
 * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
 */
Prisma.prismaVersion = {
  client: "5.12.1",
  engine: "473ed3124229e22d881cb7addf559799debae1ab"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  external_id: 'external_id',
  fullname: 'fullname',
  email: 'email',
  password: 'password',
  created_at: 'created_at',
  locale: 'locale',
  email_confirmed: 'email_confirmed'
};

exports.Prisma.AdminAccessScalarFieldEnum = {
  id: 'id',
  external_id: 'external_id',
  fullname: 'fullname',
  email: 'email',
  password: 'password',
  created_at: 'created_at'
};

exports.Prisma.CredentialScalarFieldEnum = {
  id: 'id',
  external_id: 'external_id',
  user_id: 'user_id',
  game: 'game',
  plataform: 'plataform',
  store: 'store',
  email: 'email',
  password: 'password',
  nickname: 'nickname',
  observations: 'observations',
  created_at: 'created_at',
  active: 'active'
};

exports.Prisma.ProductTranslateScalarFieldEnum = {
  id: 'id',
  stripe_product: 'stripe_product',
  name: 'name',
  subtitle: 'subtitle',
  description: 'description',
  game: 'game',
  plataform: 'plataform',
  type: 'type'
};

exports.Prisma.ProductCredentialsScalarFieldEnum = {
  id: 'id',
  product_id: 'product_id',
  email: 'email',
  password: 'password',
  nickname: 'nickname',
  plataform: 'plataform',
  store: 'store',
  created_at: 'created_at',
  delivered: 'delivered'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  external_id: 'external_id',
  user_id: 'user_id',
  order_id: 'order_id',
  credential_id: 'credential_id',
  type: 'type',
  game: 'game',
  plataform: 'plataform',
  product_id: 'product_id',
  status: 'status',
  created_at: 'created_at'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  external_id: 'external_id',
  session_id: 'session_id',
  user_id: 'user_id',
  total_products: 'total_products',
  amount_total: 'amount_total',
  currency: 'currency',
  session_status: 'session_status',
  payment_status: 'payment_status',
  status: 'status',
  created_at: 'created_at',
  expires_at: 'expires_at',
  session_url: 'session_url'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  external_id: 'external_id',
  user_id: 'user_id',
  order_id: 'order_id',
  created_at: 'created_at',
  review: 'review'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Locales = exports.$Enums.Locales = {
  BR: 'BR',
  EN: 'EN'
};

exports.Game = exports.$Enums.Game = {
  RAINBOW: 'RAINBOW',
  GTA: 'GTA'
};

exports.Plataform = exports.$Enums.Plataform = {
  PC: 'PC',
  PS4: 'PS4',
  PS5: 'PS5',
  XBOX_ONE: 'XBOX_ONE',
  XBOX_SERIES: 'XBOX_SERIES'
};

exports.Type = exports.$Enums.Type = {
  BOOST: 'BOOST',
  PACK: 'PACK',
  ACCOUNT: 'ACCOUNT'
};

exports.Status = exports.$Enums.Status = {
  WAITING: 'WAITING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
};

exports.SessionStatus = exports.$Enums.SessionStatus = {
  COMPLETE: 'COMPLETE',
  EXPIRED: 'EXPIRED',
  OPEN: 'OPEN'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  CANCELED: 'CANCELED',
  PROCESSING: 'PROCESSING',
  REQUIRE_ACTION: 'REQUIRE_ACTION',
  REQUIRES_PAYMENT_METHOD: 'REQUIRES_PAYMENT_METHOD',
  SUCCEEDED: 'SUCCEEDED'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  WAITING_CREDENTIALS: 'WAITING_CREDENTIALS',
  WAITING_PAYMENT: 'WAITING_PAYMENT',
  WAITING_REVIEW: 'WAITING_REVIEW',
  PROCESSING_PAYMENT: 'PROCESSING_PAYMENT',
  PAYMENT_WAITING_USER_ACTION: 'PAYMENT_WAITING_USER_ACTION',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  EXPIRED: 'EXPIRED',
  CANCELED_PAYMENT: 'CANCELED_PAYMENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  AdminAccess: 'AdminAccess',
  Credential: 'Credential',
  ProductTranslate: 'ProductTranslate',
  ProductCredentials: 'ProductCredentials',
  Service: 'Service',
  Order: 'Order',
  Review: 'Review'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
