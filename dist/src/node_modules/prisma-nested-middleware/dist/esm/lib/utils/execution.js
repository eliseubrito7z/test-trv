import { DeferredPromise } from "@open-draft/deferred-promise";
import { omit } from "lodash";
import { cloneParams } from "./cloneParams";
export async function executeMiddleware(middleware, params, target) {
    const paramsUpdatedPromise = new DeferredPromise();
    const nextPromise = new DeferredPromise();
    const result = middleware(cloneParams(params), (updatedParams) => {
        paramsUpdatedPromise.resolve(updatedParams);
        return nextPromise;
    }).catch((e) => {
        // reject params updated callback so it throws when awaited
        paramsUpdatedPromise.reject(e);
        // if next has already been resolved we must throw
        if (nextPromise.state === "fulfilled") {
            throw e;
        }
    });
    const updatedParams = await paramsUpdatedPromise;
    if (Array.isArray(updatedParams)) {
        const calls = await Promise.all(updatedParams.map((updatedParamsItem) => {
            // execute middleware with updated params if action has changed
            if (updatedParamsItem.action !== params.action) {
                return executeMiddleware(middleware, updatedParamsItem, omit(target, "index"));
            }
            return [
                {
                    nextPromise,
                    result,
                    updatedParams: updatedParamsItem,
                    origin: target,
                    target: {
                        ...target,
                        action: updatedParamsItem.action,
                    },
                },
            ];
        }));
        return calls.flat();
    }
    // execute middleware with updated params if action has changed
    if (updatedParams.action !== params.action) {
        return executeMiddleware(middleware, updatedParams, omit(target, "index"));
    }
    return [
        {
            nextPromise,
            result,
            updatedParams,
            origin: target,
            target: { ...target, action: updatedParams.action },
        },
    ];
}
