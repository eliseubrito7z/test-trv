"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeMiddleware = void 0;
const deferred_promise_1 = require("@open-draft/deferred-promise");
const lodash_1 = require("lodash");
const cloneParams_1 = require("./cloneParams");
async function executeMiddleware(middleware, params, target) {
    const paramsUpdatedPromise = new deferred_promise_1.DeferredPromise();
    const nextPromise = new deferred_promise_1.DeferredPromise();
    const result = middleware((0, cloneParams_1.cloneParams)(params), (updatedParams) => {
        paramsUpdatedPromise.resolve(updatedParams);
        return nextPromise;
    }).catch((e) => {
        // reject params updated callback so it throws when awaited
        paramsUpdatedPromise.reject(e);
        // if next has already been resolved we must throw
        if (nextPromise.state === "fulfilled") {
            throw e;
        }
    });
    const updatedParams = await paramsUpdatedPromise;
    if (Array.isArray(updatedParams)) {
        const calls = await Promise.all(updatedParams.map((updatedParamsItem) => {
            // execute middleware with updated params if action has changed
            if (updatedParamsItem.action !== params.action) {
                return executeMiddleware(middleware, updatedParamsItem, (0, lodash_1.omit)(target, "index"));
            }
            return [
                {
                    nextPromise,
                    result,
                    updatedParams: updatedParamsItem,
                    origin: target,
                    target: {
                        ...target,
                        action: updatedParamsItem.action,
                    },
                },
            ];
        }));
        return calls.flat();
    }
    // execute middleware with updated params if action has changed
    if (updatedParams.action !== params.action) {
        return executeMiddleware(middleware, updatedParams, (0, lodash_1.omit)(target, "index"));
    }
    return [
        {
            nextPromise,
            result,
            updatedParams,
            origin: target,
            target: { ...target, action: updatedParams.action },
        },
    ];
}
exports.executeMiddleware = executeMiddleware;
