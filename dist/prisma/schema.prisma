// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int          @id @default(autoincrement())
  external_id String?      @unique
  fullname    String       @db.VarChar(70)
  email       String       @unique @db.VarChar(320)
  password    String?       
  created_at  DateTime     @default(now()) @db.Timestamp(3)
  locale      Locales?
  email_confirmed Boolean @default(false)
  orders      Order[]
  credentials Credential[]
  services    Service[]
  reviews     Review[]

  @@map("users")
}

model AdminAccess {
  id          Int          @id @default(autoincrement())
  external_id String?      @unique
  fullname    String       @db.VarChar(70)
  email       String       @unique @db.VarChar(320)
  password    String       @db.VarChar(72)
  created_at  DateTime     @default(now()) @db.Timestamp(3)

  @@map("admin_access")
}

model Credential {
  id           Int       @id @default(autoincrement())
  external_id  String?   @unique
  user_id      Int
  user         User      @relation(fields: [user_id], references: [id])
  game         Game
  plataform    Plataform
  store        String?    @db.VarChar(40)
  email        String    @db.VarChar(320)
  password     Bytes     @db.ByteA
  nickname     String    @db.VarChar(40)
  observations String?   @db.VarChar(255)
  created_at   DateTime  @default(now()) @db.Timestamp(3)
  active       Boolean   @default(true)
  services     Service[]

  @@map("credentials")
}

model ProductTranslate {
  id           Int       @id @default(autoincrement())
  stripe_product String  @unique
  name        String    @db.VarChar(250)
  subtitle    String    @db.VarChar(250)
  description String    @db.VarChar(500)
  game        Game
  plataform   Plataform
  type        Type

  @@map("product_translate")
}

model ProductCredentials {
  id           Int       @id @default(autoincrement())
  product_id   String
  email        String    @db.VarChar(320)
  password     Bytes     @db.ByteA
  nickname     String    @db.VarChar(40)
  plataform    Plataform
  store        String?    @db.VarChar(40)
  created_at   DateTime  @default(now()) @db.Timestamp(3)
  delivered    Boolean   @default(false)

  @@map("product_credentials")
}

model Service {
  id            Int        @id @default(autoincrement())
  external_id   String?    @unique
  user_id       Int
  user          User       @relation(fields: [user_id], references: [id])
  order_id      Int
  order         Order      @relation(fields: [order_id], references: [id])
  credential_id Int?
  credential    Credential? @relation(fields: [credential_id], references: [id])
  type          Type       
  game          Game
  plataform     Plataform
  product_id    String
  status        Status     @default(WAITING)
  created_at    DateTime   @default(now()) @db.Timestamp(3)

  @@map("services")
}

model Order {
  id                   Int           @id @default(autoincrement())
  external_id          String?       @unique
  session_id           String @unique
  user_id              Int
  user                 User          @relation(fields: [user_id], references: [id])
  total_products       Int
  amount_total         Int
  currency             String        @db.VarChar(3)
  session_status       SessionStatus @default(OPEN)
  payment_status       PaymentStatus @default(REQUIRES_PAYMENT_METHOD)
  status               OrderStatus?  @default(WAITING_PAYMENT)
  created_at           Int
  expires_at           Int
  session_url          String?
  services             Service[]
  review               Review?       

  @@map("orders")
}

model Review {
  id            Int        @id @default(autoincrement())
  external_id   String?    @unique
  user_id       Int
  user          User       @relation(fields: [user_id], references: [id])
  order_id      Int        @unique
  order         Order      @relation(fields: [order_id], references: [id])
  created_at    DateTime   @default(now()) @db.Timestamp(3)
  review        String     @db.VarChar(255)

  @@map("reviews")
}

enum OrderStatus { 
  WAITING_CREDENTIALS
  WAITING_PAYMENT
  WAITING_REVIEW
  PROCESSING_PAYMENT
  PAYMENT_WAITING_USER_ACTION
  IN_PROGRESS
  COMPLETED
  EXPIRED
  CANCELED_PAYMENT
}

enum Status {
  WAITING
  IN_PROGRESS
  COMPLETED
}

enum SessionStatus {
  COMPLETE
  EXPIRED
  OPEN
}

enum PaymentStatus {
  CANCELED
  PROCESSING
  REQUIRE_ACTION
  REQUIRES_PAYMENT_METHOD
  SUCCEEDED
}

enum Game {
  RAINBOW
  GTA
}

enum Plataform {
  PC
  PS4
  PS5
  XBOX_ONE
  XBOX_SERIES
}

enum Type {
  BOOST
  PACK
  ACCOUNT
}

enum Locales {
  BR
  EN
}
